---
layout: material
title: 'Part 1 - The Command Line'
date: 1969-12-28 00:04:00 +0200
permalink: /command-line/
tag: material-eng
---

This is the beginning of the course material. The primary goal of the first part is to get to know the command line in a Unix-like environment.

<h2>The learning goals for this part</h2>

The goal is that after this part the student

- Will understand the differences between a graphical and a text-based user interface.
- Can navigate in the file system using the command line.
  - ls and the options -a and -l
  - cd
  - mkdir
- Can create and open, save and close a file with some command line text editor
  - nano
  vim
- Can use relative and absolute paths to refer to files and folders
- Understands the difference between the home folder and the root folder.
- Can copy and paste files and folders from the command line
- Can give several files to a program as an argument with the \* wild card.
- Can handle text files on the command line.
  - cat
  - tail and head, and the option `n`
  - grep
- Can handle output on the command line
  - The pipe \|
  - \> and \>\>
- Can create an SSH key pair and establish an SSH connection to another system.
- Can search content from the internet using the command line
  - wget
- Can read the output of the command ls -l.
- Can modify the permissions of a file or a folder.
  - chmod
- Can write a simple bash script and run it.
- Understands the meaning and the possible dangers of using sudo.
- Can search for information about the command line and its programs from the Internet.


<h2>The command Line</h2>

Computers are an inseparable part of the modern society. The average citizen is likely to use several different kinds of computers every day. Computers are also arguably the most important tool for computer scientists.

You are probably used to using computers in a certain way. Creating, searching and deleting files is most likely easy for you. You know that double clicking a folder moves you inside it, and you know how to open the window prompt for deleting a file, or how to open an image with a specific program.

The former is an example of a _graphical user interface_ (GUI): The possible actions are presented in some sort of menu and chosen by clicking. Files can also be drag and dropped to new places. Contrary to the graphical user interface, the command line is a _text-based user interface_. This means that one does not use the mouse for choosing specific actions. Instead, the computer is given commands by writing them and pressing enter. The options are not presented in the same way as in a graphical environment, and one can get by without using the mouse at all.

{% capture message_info_1 %}
The command line can also be called the <i>terminal</i>. It's also sometimes referred to as the <i>shell</i> or <i>console</i>.
{% endcapture %}{% include message.html type="info" text=message_info_1 title="Many names of the terminal" %}


There was a time when a text-based user interface was the only possible way to use a computer. Nowadays graphical user interfaces are common and work quite well. However, the command line remains a vital tool for programmers. For lots of tools created for programmers, a GUI doesn't exist, and using the command line is the only option. In addition, a GUI can be tediously slow for some use cases, when handling large amounts of data for example.

Let's start by opening the command line. In Ubuntu and several other Linux-systems you can do this by pressing `CTRL`, `ALT` and `T` at the same time. In MacOS write "terminal" to Spotlight (`âŒ˜ + Space`) and press <kbd>Enter</kbd>. YOu can also search the computer's applications for "terminal".

In any case, a new window should open in front of you. There should be a blinking cursor and some text which looks something like the following (the example is from a Linux computer):

```bash
user@computer:~$
```

The text in front of `@` is your username on the computer, and the following text before `:` is the computer's name. The executable command is written to the space pointed by the blinking cursor, and run by pressing <kbd>Enter</kbd>.

{% capture message_info_2 %}
Note that in the instructions found online a <code>$</code>-symbol is often included in front of the command. The dollar sign is used to indicate that the command should be run in the command line as a normal user. You should not include it in the command.
{% endcapture %}{% include message.html type="info" text=message_info_2 title="Established notation" %}



![A MacOS terminal](/assets/mac_terminal.png){:class="img-responsive"}

![A Linux terminal](/assets/ubuntu_terminal.jpg){:class="img-responsive"}

You can see the default terminals for MacOS and Ubuntu above.

<h2>Commands</h2>

Text-based user interfaces work with _commands_. A command is a piece of text you write to the command line to make the computer do something. With commands you can run programs, which can for example copy files or establish connections between systems.

_An option_ or _a flag_ is a parameter which allows the user to add features to the command. They are most often binary, behavioral settings, which the user turns on or off. Some options require additional parameters, which are written after the option. The possible options are predefined by the command. They are given to the command with a dash (-).

An argument is an unconstrained value defined by the user. The most common example of an argument is a file name. The argument defines usually the target of the command: where a file should be copied, or what it should be renamed to.

Here are two examples of commands, where you can see how options and parameters can be used:

```bash
ls -la Downloads/tiedosto
```

First, try to run just the command `ls` in your home folder and observe the output. Then run `ls -la` and `ls -la ~/Downloads`. You don't have to understand what the command does, but you should notice that the outputs look different each time.

`ls` is a very commonly used command, which you will learn how to use in this part. It displays information about the files in your file system. By default, it prints out the names of the files in the current directory. With the options `-a` and `-l` (notice how two options are given to the command in the example above) affect what information is printed out. If you give the command `ls` a path to a directory as an argument, it will only display information about the contents of that directory. This demonstrates how options are used to change and specify the behaviour of a command.

The callable program defines which commands it offers. Usually you can see the possible commands by adding the option `--help` (or `-h` for short) to the end of the command. You can see a more specific user guide with the command `man` by giving the program name as argument (for example `man ls`).

If the computer doesn't recognise the command given, an error message will appear:

```
user@computer:~$ asdf

Command 'asdf' not found, did you mean:

  command 'asdfg' from deb aoeui
  command 'sadf' from deb sysstat
  command 'sdf' from deb sdf
  command 'adsf' from deb ruby-adsf

Try: sudo apt install <deb name>

user@computer:~$
```

The computer suggests similar programs, and finally advises to install the program.

Let's take a look at the `man` page for the command `ls`. Running the command `man ls` on the command line will yield the following:

![man page for ls](/assets/man.png)

Even though man pages can be hard to read for beginners, they usually offer the most comprehensive documentation available for a specific command.

The "name" section gives you an overall understanding about that the command does. "Synopsis" tells how you can call the program. In the case of the command `ls` for example, the options should be given to the command before the file path. Both the options and the file name are optional parameters, which is why they're written inside square brackets.

{% capture message_info_3 %}
You can browse the <code>man</code> page using the arrow keys, and exit by pressing <code>q</code>.
{% endcapture %}{% include message.html type="info" text=message_info_3 title="Browsing the manual pages" %}


Options are sometimes given two forms: a short form, which is usually just one character, and a long one. The short form is given to the command with just one dash (`-`), and the long form using two dashes (`--`). The `man` page displays both options, as you can see in the image above.

Note that if you want to give a command an argument containing spaces, it has to be given inside quotation marks. Otherwise the command line will interpret it as a separate command or argument.

```
ls "i am a badly named file"
```

or

```
ls 'i am a badly named file'
```

{% capture message_info_4 %}
The names of commands are usually abbreviations of english words. "man" stands for "manual", "ls" for "list", and so on. You can find the origins for some commands in this material, in the hope of making them easier to remember.
{% endcapture %}{% include message.html type="info" text=message_info_4 title="Confusing commands" %}


<h2> File management using the command line</h2>

You can browse and manage files using the command line just as in the graphical environment. Let's compare managing files using a graphical and a text user interface.

Open the graphical file browser. In ubuntu, open the application called "Files", or write the command `nautilus` and press <kbd>ENTER</kbd>. In Windows write `explorer.exe` instead. In MacOS, open finder and press the keys `Shift + Cmd + H`.

You should now be in your _home folder_. The home folder holds all the personal files and folders of a user. If you are using one of the department's computers, the contents of your home folders are the same regardless of which physical computer you are using. This is because the contents are fetched from elsewhere. If you are using your personal computer, the home folder only includes the files on that physical computer.

{% capture message_info_5 %}
If using Windows Subsystem for Linux (or Ubuntu application), note that your Linux home is different than Windows home. If you need to access files or folders in your Windows home navigate to /mnt/c/Users/username (using cd /mnt/c/Users/username). Also note that most of the time directory ~ will refer to your Linux home
{% endcapture %}{% include message.html type="info" text=message_info_5 title="The home directory on Windows" %}


Note that if you opened the graphical file browser using the command line, the shell is "locked", and you can't run any other commands using that window. You can close the currently running program by pressing <kbd>CTRL + C</kbd>. You can press the keys repeatedly if necessary.

{% capture message_info_6 %}
Because the combination <kbd>CTRL + C</kbd> has a special meaning on the command line, in Linux you will have to use <kbd>CTRL + SHIFT + C</kbd> to copy selected text and <kbd>CTRL + SHIFT + V</kbd> to paste.
{% endcapture %}{% include message.html type="info" text=message_info_6 title="Copying and pasting in the terminal" %}


Your home folder probably contains a bunch of miscellanous files and folders, like _Downloads_ and _Documents_. Open the command line in order to see the same folders on the text-based interface. You can do this by writing `ls` on the command line and pressing <kbd>ENTER</kbd>. The output should something like this:

```bash
user@lcomputers:~$ ls
Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos
```

When using Windows you might see following instead:

```
dir: cannot access 'Downloads': No such file or directory
user@computer:~$ 
```
If so, try using `cd /mnt/c/Users/username` first.


You'll notice how `ls` lists out all the files and folders in your home folder. You should see the same ones as in the graphical user interface, only in a simpler form.

By default the command line opens up the home folder. In order to visit other folders a command for changing directories is required. This can be done with `cd`, abbreviated from **c**hange **d**irectory. The `cd` command is given the directory where you want to go as an argument. If you don't give `cd` any arguments, it will take you to the home folder.

Now navigate to the _Downloads_ folder by running `cd Downloads`. Note that the command is _case sensitive_, so the folder name should be given exactly as it appears in your system. After running the command your command line prompt should look like this:

```bash
user@computer:~/Downloads$
```

The part after `:` is the current, active folder. `~` refers to the user's home folder.

Run the command `ls` again. You have now changed directories, so the output should be different from last time.

The command `ls` can also display more specific information. Move back to the home folder (for example by running `cd` without any extra arguments), and keep the graphical user interface open next to the command line. Then run `ls -a`. Notice how you can now see a lot more information on the command line compared to the file browser. This is due to the option `-a`. When using it, `ls` shows all the files in a folder, including the _hidden_ ones.

In a Unix environment, a hidden file or folder means that it starts with a dot (.), for example `.config`. Hidden files usually contain settings and information, that the user rarely needs to change. In Linux it is possible to see hidden files in the graphical user interface by pressing <kbd>CTRL + h</kbd>. If you're using MacOS, press <kbd>cmd + SHIFT + .</kbd>

In the graphical user interface, you can create folders by right-clicking with your mouse, and pressing "create new folder". In a Unix-like environment, this is done with the command `mkdir`, abbreviated from "make directory". The command is given the name of the new folder as an argument.

In the end, the command line works in a similar way to the graphical user interface: `cd` is the same as clicking a folder and `ls` shows the contents of a folder. In this part, you will learn how to things you already know how to do in a graphical environment using the command line.

{% capture exercise_auto_1 %}
You can mark this exercise as done after you've gone through the previous example of the differences between the graphical and text-based user interfaces. Make sure you replicated the examples yourself using the command line.
{% endcapture %}
{% include exercise.html points="5%" title="Exercise 1: Graphical vs. text-based user interface" content=exercise_auto_1 %}


{% capture exercise_auto_2 %}
Create a folder named "lapio" in your home folder. Make sure you created the folder correctly by checking the output of <code>ls</code>.
{% endcapture %}
{% include exercise.html points="5%" title="Exercise 2: Creating a folder" content=exercise_auto_2 %}


<h2>Tips for using the command line more efficiently</h2>

If you're used to using the graphical file browser, you're probably wondering how slow and inefficient using the command line must be. It is naturally a question of custom, but there's also one feature on the command line, which makes writing commands a lot faster: tab completion. With the tab key you can automatically complete filenames and sometimes even commands, depending on the program.

Let's try tab completion. Nagivate to your home folder. First, write down `cd D` and press the tab key (located above <kbd>CAPS LOCK</kbd>) a couple of times. All the directories starting with the letter "D" should be printed to the command line, including at least `Downloads` and `Documents`.

Let's assume that you want to move to the `Downloads` folder. It suffices to write down "Dow", and press the tab key, and the rest of the folder name will be completed to the command line (assuming that there are no other folders starting with "Dow" in your home folder).

Another useful trick to know is browsing old commands. This can be done by pressing the arrow key up and down. This is a useful habit you should try and adopt as early as possible. Note that when you are writing a command, you cannot use the cursor to move in the written text. You have to use the arrow keys instead, for example. You can read more about other useful keyboard combinations [here](https://unix.stackexchange.com/a/255716).

<h2>Text processing</h2>

Gedit is a simple graphical text editor, which allows you to edit all kinds of text files. You can find Gedit in Linux by writing "gedit" to the Launcher, opened by pressing the "Windows" key. In MacOS we recommend using the application "TextEdit" for this section of the material, as it allows defining the saving location of a file, and you will be able to find it easily using the command line.

Open a graphical text editor and create a file called `example.txt`. Save it in the `lapio` folder you created earlier. The `.txt` is a file extension, which means that the file contains ordinary text, and not runnable code for example. Add some arbitrary text to the file.

After creating the `example.txt` file, navigate to the `lapio` folder and open it using the command `nano example.txt`. Nano is a text-based text editor, which is used from the command line. This means that the editor is controlled using specific key combinations instead of clicking buttons.

In order to close the editor, you have to press <kbd>CTRL + X</kbd>. If some changes have been made, you have to confirm whether you wish to save or discard them, by pressing `y` for "yes" or `n` for "no". Lastly, the editor confirms the name of the saved file.

Note that `nano` helps you by telling the keys for specific actions at each step. This is rather common, which is why it is important to learn to read the outputs of the command you are using (as simple and stupid as it may sound). Usually the program tells your directly, which keys you should press next.

{% capture message_info_7 %}
If you see the error message  <code>nano: command not found</code>, nano is not installed in your system. The easiest way to install it is by using a package manager. See the end of the part for some instructions on installing applications via the command line.
{% endcapture %}{% include message.html type="info" text=message_info_7 title="Finding Nano" %}


{% capture message_info_8 %}
In Windows you can use a program called notepad instead of gedit. It should be installed to your system by default. However, we recommend the <a href="https://notepad-plus-plus.org/">notepad++</a> editor. Windows handles line breaks differently from Unix systems: In Windows, the line break symbol is <code>\r\n</code> whereas in Unix it's <code>\n</code>. Thus inspecting Windows documents created with notepad can look bizarre when accessing them using the Ubuntu command line.

<br/><br/>
Below are some instructions on creating a file using notepad++ with Unix new lines.

<img alt="Changing the new line symbol with notepad++" src="/assets/notepad++_lf.png" />
<br/>

Note that the file you created with notepad has been created as a Windows user. In Windows 10, the command line is used as a separate Unix user. You can find the Windows user's files from the directory <code>/mnt/c</code>, if you saved them to the C drive.
{% endcapture %}{% include message.html type="info" text=message_info_8 title="Notepad and Unix-style newlines" %}


{% capture exercise_auto_3 %}
Find out how the text editor <code>nano</code> works by using Google or the <code>man</code> command. Make sure you know how to do at least the following things:

<ul>
<li> Saving a file without closing nano</li>
<li> Copying and pasteing in nano</li>
</ul>

Test out the procedures in practice! For example, open a file <code>example.txt</code>, add some text into it and save without closing. Then open the file using another text editor to make sure that the contents were saved.
{% endcapture %}
{% include exercise.html points="5%" title="Exercise 3: nano" content=exercise_auto_3 %}


{% capture exercise_auto_4 %}
Another command line text editor with a lot more features is <a href="https://en.wikipedia.org/wiki/Vim_(text_editor)">vim</a>. However, it is notoriously unintuitive to use for beginners. Find out the following things about using vim:

<ul>
<li>What are "insert mode" and "command mode"?</li>
<li>How can you switch between then?</li>
<li>How can you close vim? <br></li>
</ul>
{% endcapture %}
{% include exercise.html points="5%" title="Exercise 4: vim" content=exercise_auto_4 %}


<h2> Paths</h2>

A path is a pointer to a specific file or folder in a file system. It is like an address allowing one to uniquely identify the location of a desired resource. It consists mostly of filenames and slashes (`/`). Paths are often used as command arguments.

A path can be _relative_ or _absolute_: A relative path is interpreted with respect to the current folder, whereas an absolute path is interpreted with respect to the _root folder_, sometimes just called _the root_. The root folder contains all the files and folders of the system, and it should not be confused with the personal _home folder_. The root folder contains all the users' home folders. In consequence, an absolute path to a specific file is the same no matter which folder in the system it is written in. On the contrary, a relative path to a folder depends on the current folder, so it is not the same everywhere.

{% capture message_warning_1 %}
Be careful with the root! Some of it's contents are vital to the computer. Don't delete or move folders in the root without a good reason.
{% endcapture %}{% include message.html type="warning" text=message_warning_1 title="Be careful with the root directory" %}


An absolute path always starts with the slash symbol `/`, because the absolute path of the root is `/`. If a path isn't started with a slash the system will interpret that the user is referring to a file or folder in the current working directory. The absolute path of the current folder can be printed out with `pwd` (**p**rint **w**orking **d**irectory). In Linux the home folder of a user is usually located in `/home/user/`, and in MacOS it's in `/Users/user/`. In both systems the home folder can be referred to with `~`. For example, the path to the Downloads folder in Linux would be either `/home/user/Downloads` or `~/Downloads`.

Dots are often used in relative paths. One dot `.` refers to the current folder, and two dots `..` refers to the folder the current folder is in, or its "mother folder". For example running `cd ../..` would move the user two folders up. The relative path of the Downloads folder from the home folder is `./Downloads` or just `Downloads`.

Here is a longer example of using absolute and relative paths:

Let's assume that you have downloaded cat pictures for each year of the month. The pictures of each month are in their own folders, all located in a subfolder of Downloads. You have moved to the folder which contains all the cute pictures for May, whose path is `~/Downloads/cat-pictures/may/`. Given that you are _inside_ the May folder, you can refer to the Downloads folder with the path `../..`, `~/Downloads` or `/home/user/Downloads` in Linux and `/Users/user/Downloads` in MacOS. If you wish to refer to the November folder from the May folder, you can do so for example with the path `../november/`. The slash at the end of the path highlights that the resource in question is a folder, but it is not required.

```bash
user@computer:~/Downloads/cat-pictures/may$ ls
cat1.jpg
user@computer:~/Downloads/cat-pictures/may$ cd ../../
user@computer:~/Downloads$ cd cat-pictures/may/
user@computer:~/Downloads/cat-pictures/may$ cd ../november/
user@computer:~/Downloads/cat-pictures/november$ ls
cat2.jpg
```

{% capture message_info_9 %}
Remember to use tab completion when writing paths! Always check if you can complete the next component of the path automatically before writing it yourself. In addition, the command line shows you the path of the current folder with respect to your home folder. This makes it easier to navigate and write paths in the command line.
{% endcapture %}{% include message.html type="info" text=message_info_9 title="Spare your fingers" %}


{% capture exercise_auto_5 %}
In this exercise you'll practice file management from the command line. Start by creating a folder structure described in the figure below:

<img src="/assets/file_management_1.png" alt="Figure describing the starting position"/>

<p>
In the folder structure the directory <code>school</code> contains three folders: <code>lapio</code>, <code>CS1</code> and <code>CS2</code>. The <code>lapio</code> folder contains a file called <code>cmnd-line.txt</code>, the <code>CS1</code> folder contains <code>lecture1.txt</code> and the <code>CS2</code> folder contains the files <code>lecture2.txt</code> and <code>java.txt</code>.

<br><br>

First create the <code>school</code> folder and move inside it. Then create the folder structure described above. Create some of the files and folders directly from the <code>school</code> folder, by using longer paths, and some by moving into the subfolder before creating a new file.
</p>

{% capture message_info_10 %}
You can create a text file by opening it in a text editor and saving, or with the command <code>touch</code>.
{% endcapture %}{% include message.html type="info" text=message_info_10 title="Creating files" %}


Make sure you've created all the proper files and folders with <code>ls</code>.

Remember to use tab completion!
{% endcapture %}
{% include exercise.html points="5%" title="Exercise 5: File management 1" content=exercise_auto_5 %}



<h2> Moving and renaming files</h2>

In a graphical environment copying is done with the key combination <kbd>CTRL + C</kbd>, cutting with <kbd> CTRL + X</kbd> and pasteing is done with <kbd>CTRL + V</kbd>. Let's see how these three procedures can be done using the command line.

Copying is done using the command `cp` (<b>c</b>o<b>p</b>y). It takes the path to the file to be copied and the target path as arguments. For example, `cp example.txt example2.txt` copies the file `example.txt` as a file called `example2.txt` in the current folder. Paths also allow you to copy files between folders. Running `cp example.txt ~/Documents/example2.txt` copies the file `example.txt` to the `Documents` folder and renames it to `example2.txt`. Giving an existing folder as the second argument copies the file without changing its name: `cp example.txt ~/Documents/` copies the file to `Documents` and keeps the name as `example.txt`.

Files and folders can be moved with the command `mv` (<b>m</b>o<b>v</b>e). The command works in a very similiar way to `cp`, except that the original file is deleted from the system after copying it. This corresponds to the "cutting" feature in a graphical user interface. One can also rename files using `mv`: if the second argument points to the same folder as the first one, the result is a renamed file.


Examples of using `mv`:

`mv exmple.txt example.txt` renames the file `exmple.txt` to `example.txt`.

`mv example.txt ~` moves the file `example.txt` from the current folder to the home folder.

`mv exmple.txt ~/example.txt` renames the file `exmple.txt` from the current folder to `example.txt` and moves it to the home folder.

`mv ~/example.txt ~/Downloads/` moves the file `example.txt` from the home folder to the `Downloads` folder.

{% capture exercise_auto_6 %}
This exercise continues where the previous exercise left off.

After creating the initial folder structure, change it to the following with commands <code>mv</code> and <code>cp</code>:

<p><img src="/assets/file_management_2.png" alt="Target folder structure"/></p>

The folder <code>lapio</code> should now contain a file called <code>command-line.txt</code>. The folder <code>CS1</code> should contain a file called <code>intro.txt</code>, and the folder <code>CS2</code> the files <code>lecture1.txt</code> and <code>lecture2.txt</code>.

<br><br>

Notice that the awkward typo in <code>cmnd-line.txt</code> has been fixed. The file <code>java.txt</code> was moved to the folder <code>CS1</code> and renamed.
{% endcapture %}
{% include exercise.html points="5%" title="Exercise 6: File management 2" content=exercise_auto_6 %}


{% capture exercise_auto_7 %}
Files can be removed with the command <code>rm</code> (<b>r</b>e<b>m</b>ove).

<ol>
<li>By using the command line, remove the files you created in the previous exercise. </li>
<li>Find out how you can remove a folder from the command line.</li>
<li>Remove the whole <code>school</code> folder.</li>
</ol>
{% capture message_warning_2 %}
Note that when you remove something on the command line, it is not moved to the rubbish bin, but deleted right away.
{% endcapture %}{% include message.html type="warning" text=message_warning_2 title="There is no trashbin" %}

{% endcapture %}
{% include exercise.html points="5%" title="Exercise 7: Removing a folder" content=exercise_auto_7 %}


<h2> Wild cards</h2>

_Wild cards_ allow one to perform operations on several files at the same time. Their use is supported by almost all commands in the Unix environment, unlcuding `mv` and `cp`. Perhaps the most common wild card, the asterisk `*` corresponds to any amount of any given symbol. It can be used at any point of a string. For example the command `mv *.txt example/` moves all the files in the current directory ending with `.txt` to a folder caller `example`. Similarly `mv test* tests/` would move all the files starting with `test` to a  folder called `tests`.


```bash
user@hal9000:~/example$ ls
target file.txt note.txt picture.png
user@hal9000:~/example$ mv *.txt target/
user@hal9000:~/example$ ls
target toinen.png
```

{% capture exercise_auto_8 %}
Create a folder called <i>pictures</i> on the command line, and download a <code>jpg</code> and a <code>png</code> formatted pictures. Then add some text files to the folder, for example <code>i_am_a_file.txt</code> or <code>i_am_not_a_picture.txt</code>. Finally create a folder called <code>pictures</code> and copy all the pictures in the subfolder using wild cards. You can read about other wild cards from <a href="http://www.linfo.org/wildcard.html">here</a> for example.
{% endcapture %}
{% include exercise.html points="10%" title="Exercise 8: Wild cards" content=exercise_auto_8 %}


<h2> Other useful commands</h2>

Sometimes one might one to examine text files without opening a text editor. The easiest command for doing this is `cat`, which prints tout the contents of a text file:

```
user@hal9000:~/esimerkki$ cat example.txt
i am 
inside
the example file
```

However, if the text file is large, we might not want to print out all the lines. Using `head` or `tail` one can print only a specific amount of lines from the beginning or end of a file. The amount of lines printed is given to a parameter for the flag `-n`.

For example you can only print the first and the last rows with:

```
user@hal9000:~/example$ tail -n 1 example.txt
the example file
user@hal9000:~/example$ head -n 1 example.txt
i am
```

In the above example we gave 1 as an argument for the flag `-n`.

It is also possible to search for specific lines in a file. This can be done with the commans `grep` (search <b>g</b>lobally for a <b>r</b>egular <b>e</b>xpression and <b>p</b>rint). The command `grep` allows you to filter out specific lines from a file based on some criteria. By default `grep` returns all the **lines** which contain the exact string given as an argument. Here is an example demonstrating the basic functionality of grep:

```
user@hal9000:~/example$ cat diary.txt
October 6th

Dear diary,

I can't wait to tell you all my secrets. 

Today was a good day. I was appointed the secretary of my student association.

I won't be secretive, I'm so happy!

I'll write again soon.
user@hal9000:~/example$ grep "secret" diary.txt 
I can't wait to tell you all my secrets. 
Today was a good day. I was appointed the secretary of my student association.
I won't be secretive, I'm so happy!
```

Note that the filtering also included occurences inside another string. In most environments grep also highlights the found words with red:
![grep-example](/assets/secret.png){:class="img-responsive"}

{% capture exercise_auto_9 %}
By default <code>grep</code> is case sensitive, which means that it treats "a" and "A" differently when searching for matches.

<ul>
<li>Take a look at the output of <code>grep --help</code> or grep's <code>man</code> page, and find out how you can make grep ignore case.</li>

<li>Find out (using Google for example) how you can only match occurences which are at the beginning of a line. Make sure you understood how to do this, by practicing using the command on the command line. You can for example write the following to a file:</li>
</ul>
<pre>
Unix
Linux
macOS
UNiX
unique-unix
unIX
Operating system unix
UNIX
unix
unisport
</pre>
and then make sure you can filter out the appropriate words with grep.
{% endcapture %}
{% include exercise.html points="10%" title="Exercise 9: grep" content=exercise_auto_9 %}


{% capture message_info_11 %}
When looking for information on the internet about any commands, always make sure you test out their functionality on the command line. This makes it easier to notice if you've misunderstood something.
{% endcapture %}{% include message.html type="info" text=message_info_11 title="Experiment and learn" %}


The true power of tools like `grep` comes out when it is paired with other commands. The output of another command can be passed on to another command with the operator `|`, usually called _the pipe_. With the pipe you can do more complicated operations which require several programs with just one line.

An example of using a pipe is to pass the output of `ls` to `grep` in order to filter out specific filenames:

```
user@hal9000:~/example$ ls
example.txt note2.txt note.txt
user@hal9000:~/example$ ls | grep note
note2.txt
note.txt
```

If one couldn't use the pipe, the output of `ls` would have had to be written to a separate file before filtering with grep. The pipe allowed sharing the output of `ls` between the commands seamlessly.

However, sometimes writing outputs to files can be useful. The size of a terminal window is limited, and its contents cannot be scrolled backwards infinitely. Large outputs should be written to files in order to access them fully. This can be done with the operator `>`, which takes the name of the file to be written as an argument. For example `ls > listing.txt` moves the file listing to a file called "listing.txt", creating the file if it doesn't already exist.

Similarly, the operator `<` allows giving the contents of files as an argument to a command. This is again useful, if the input in question is too large to paste or the task has to be automated.

```
user@hal9000:~/example$ ls 
Applications	Library		      Pictures	      kissakuvia
Desktop		    Linus_Torvalds	Public          script.sh
Documents	    Movies	        Downloads	Music
user@hal9000:~/example$ ls | grep Do
Documents
Downloads
user@hal9000:~/example$ ls > listing.txt
user@hal9000:~/example$ grep Do listing.txt 
Documents
Downloads
user@hal9000:~/example$ 
```

{% capture message_info_12 %}
The operator <code>></code> overwrites the contents of the file with the given text and <code>>></code> appends them to a new line, not affecting the old contents.
{% endcapture %}{% include message.html type="info" text=message_info_12 title="Redirecting output into a file" %}


{% capture exercise_auto_10 %}
Create a text file called <code>notes.txt</code> on the command line. Paste inside the following text which describes the week of a typical student:

{% highlight text %}
monday intro to java: Java is a programming language
monday unicafe: Fish shoup
tuesday intro to java: A class can implement an interface
tuesday intro to cs: Turing tests are hard to pass
tuesday unicafe: Chicken and noodles
wednesday intro to java: A java program has to have a main method
wednesday intro to cs: The internet is a big place
wednesday unicafe: beans and rice
thursday unicafe: Hernekeittoa ja pannukakkua
thursday lapio: The command line is a black box
friday unicafe: Pizza

{% endhighlight %}
Then separate the menu of this week to its own file <code>unicafe.txt</code>. You don't have to remove the menu from the <code>notes</code> file. Also separate the notes concerning the course Introduction to Java.
{% endcapture %}
{% include exercise.html points="5%" title="Exercise 10: A Student's Notes" content=exercise_auto_10 %}


<h2> SSH connection</h2>

Up until now we have used the command line to run programs in the local file system. However, it is also possible to connect to another system using the command line. SSH is an encrypted connection protocol, which allows logging in to another computer using the command line. An encrypted connection means that infromation is not shared in a human readable plain text form. The goal is to make sure that only the intended recipients can decrypt messages and read their contents.

In a Unix environment an SSH connection can be established with the command `ssh`. Its basic functionality is the following: `ssh user@server.address` connects to a server at `server.address` and tries to login as `user`. The user is asked their password, and if authentication is successful, a connection is opened. The working directory is changed to the remote server on the command line, and one can run commands as in the local environment, except the commands are run in the remote system where one just connected.

The department of computer science has four different servers for remote connection. Authentication is done using the university's account.

1.  melkki.cs.helsinki.fi
2.  melkinpaasi.cs.helsinki.fi
3.  shell.cs.helsinki.fi
4.  melkinkari.cs.helsinki.fi

{% capture message_info_13 %}
Nowadays, students are required to request access rights for these servers before connecting via SSH is possible.
  All computer science students are entitled to these rights and they can be requested from <a href="https://helpdesk.it.helsinki.fi/">Helpdesk</a>.
    This extra step was introduced in an effort to minimize the potential damage caused in case a student's AD credentials fall into the wrong hands.
{% endcapture %}{% include message.html type="warning" text=message_info_13 title="Acquiring credentials for university servers" %}


All these servers direct the user to the same, personal home directory, which you can acces using all the computers at the department.

Let's use the `ssh` command to create a connection to the department's servers:

```
user@hal9000:~$ ssh user@melkki.cs.helsinki.fi
user@melkki.cs.helsinki.fi's password:
```

{% capture message_info_14 %}
Note that it's normal for text not to appear when you are inserting your password.
{% endcapture %}{% include message.html type="info" text=message_info_14 title="Invisible passwords" %}


When connecting to a system for the first time, an error message will be displayed, stating that the server is not yet trusted. If you write `yes` to indicate that the server is trusted, its fingerprint will be remembered. Even though SSH is encrypted, it is not totally attack proof (as nothing in the internet generally is). If you receive this message when using a public internet for example, it could be safer not to establish a connection, since you could be the victim of an attack.

When the connection has been established, the command line will look slightly different:

```
user@melkki:~$
```

The current folder in the command line has changed to the home directory of your department's user, and you can access all its files. You can end the connection by running `exit`.

You can read more about SSH from [here](https://www.ssh.com/ssh/) for example.

<h2> SSH key pairs</h2>

When using the ssh command in the previous section, you authenticated yourself with the department's user credentials. There is also another way: an SSH key pair consisting of a public and a private key. In practice, the keys are two long strings, which seem random. They are used to make sure that only authorized people can access certain information. This is an encryption technique we will not cover more in detail on this course, but which you can read more about by searching for example _public key encryption_ or _asymmetric cryptography_. **It suffices to understand that the private key should only be known by its owner, whereas the public key can safely be shared with others**.

You can create an SSH key pair with the command `ssh-keygen`. The command asks for a password and a location for the key. We recommend not changing the default location of a key pair without a specific reason. The default location is the `.ssh` folder in the current user's home directory.


{% capture message_warning_3 %}
Always use a password when creating an SSH key pair. If you use an SSH key with the department's servers, you have to set a password according to the department's rules.
{% endcapture %}{% include message.html type="warning" text=message_warning_3 title="University policy on SSH keys" %}
