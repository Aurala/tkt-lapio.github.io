---
layout: material
title: 'Part 1 - The Command Line'
date: 1969-12-28 00:04:00 +0200
permalink: /command-line/
tag: material
---

This is the beginning of the course material. The primary goal of the first part is to get to know the command line in a Unix-like environment.

<h2>The learning goals for this part</h2>

The goal is that after this part the student

- Will understand the differences between a graphical and a text-based user interface.
- Can navigate in the file system using the command line.
  - ls and the options -a and -l
  - cd
  - mkdir
- Can create and open, save and close a file with some command line text editor
  - nano
  vim
- Can use relative and absolute paths to refer to files and folders
- Understands the difference between the home folder and the root folder.
- Can copy and paste files and folders from the command line
- Can give several files to a program as an argument with the \* wild card.
- Can handle text files on the command line.
  - cat
  - tail and head, and the option `n`
  - grep
- Can handle output on the command line
  - The pipe \|
  - \> and \>\>
- Can create an SSH key pair and establish an SSH connection to another system.
- Can search content from the internet using the command line
  - wget
- Can read the output of the command ls -l.
- Can modify the permissions of a file or a folder.
  - chmod
- Can write a simple bash script and run it.
- Understands the meaning and the possible dangers of using sudo.
- Can search for information about the command line and its programs from the Internet.


<h2>The command Line</h2>

Computers are an inseparable part of the modern society. The average citizen is likely to use several different kinds of computers every day. Computers are also arguably the most important tool for computer scientists.

You are probably used to using computers in a certain way. Creating, searching and deleting files is probably easy for you. You know that double clicking a folder moves you inside it, you know how to open the window prompt for deleting a file, or how to open an image with a specific program.

The former is an example of a _graphical user interface_ (GUI): The possible actions are presented in some sort of menu and chosen by clicking. Files can also be drag and dropped to new places. Contraty to the graphical user interface, the command line, is a _text-based user interface_. This means that one does not use the mouse in order to choose specific actions. Instead, the computer is given commands by writing them and pressing enter. The options are not presented in the same way as in a graphical environment, and one can get by without using the mouse at all.

<div class="note">
The command line can also be called the <i>terminal</i>. It's also sometimes referred to as the <i>shell</i> or <i>console</i>.
</div>

There was a time when a text-based user interface was the only possible way to use a computer. Nowadays graphical user interfaces are common and function well. However, the command line remains a vital tool for programmers. For lots of tools created for programmers, a GUI doesn't exist, and using the command line is the only option. In addition, a GUI can be tediously slow for some use cases, when handling large amounts of data for example.

Let's start by opening the command line. In Ubuntu and several other Linux-systems you can do this by pressing `CTRL`, `ALT` and `T` at the same time. In MacOS write "terminal" to Spotlight (`âŒ˜ + Space`) and press <kbd>Enter</kbd>. YOu can also search the computer's applications for "terminal".

In any case, a new window should open in front of you. There should be a blinking cursor and some text which looks something like the following (the example is from a Linux computer):

```bash
user@computer:~$
```

The text in front of `@` is your username on the computer, and the following text before `:` is the computer's name. The executable command is written to the space pointed by the blinking cursor, and run by pressing <kbd>Enter</kbd>.

<div class="note">
Note that in the instructions found online there is often the <code>$</code>-symbol in front of the command. The dollar sign is used to indicate that the command should be run in the command line as a normal user. You should not include it in the command.
</div>


![A MacOS terminal](/assets/mac_terminal.png){:class="img-responsive"}

![A Linux terminal](/assets/ubuntu_terminal.jpg){:class="img-responsive"}

You can see the default terminals for MacOS and Ubuntu above.

<h2>Commands</h2>

Text-based user interfaces work with _commands_. A command is a piece of text you write to the command line to make the computer do something. With commands you can run programs, which can for example copy files or establish connections between systems.

_An option or _a flag_ is parameter which allows the user to add features to the command. They are most often binary, behavioral settings, which the user turns on or off. Some options require additional parameters, which are written after the option. The possible options are predefined by the command. They are given to the command with a dash (-).

An argument is a free value defined by the user. The most common example of an argument is a file name. The argument defines usually the target of the command: where a file should be copied, or what it should be renamed to.

Here are two examples of commands, where you can see how options and parameters can be used:

```bash
ls -la Downloads/tiedosto
```

First, try to run just the command `ls` in your home folder and observe the output. Then run `ls -la` and `ls -la ~/Downloads`. You don't have to understand what the command does, but you should notice that the outputs look different each time.

`ls` is a very commonly used command, which you will learn how to use in this part. It displays information about the files in your file system. By default, it prints out the names of the files in the current directory. With the options `-a` and `-l` (notice how two options are given to the command in the example above) affect what information is printed out. If you give the command `ls` a path to a directory as an argument, it will only display information about the contents of that directory. This demonstrates how options are used to change and specify the behaviour of a command.

The callable program defines which commands it offers. Usually you can see the possible commands by adding the option `--help` (or `-h` for short) to the end of the command. You can see a more specific user guide with the command `man` by giving the program name as argument (for example `man ls`).

If the computer doesn't recognise the command given, an error message will appear:

```
user@computer:~$ asdf

Command 'asdf' not found, did you mean:

  command 'asdfg' from deb aoeui
  command 'sadf' from deb sysstat
  command 'sdf' from deb sdf
  command 'adsf' from deb ruby-adsf

Try: sudo apt install <deb name>

user@computer:~$
```

The computer suggests similar programs, and finally advises to install the program.

Let's take a look at the `man` page for the command `ls`. Running the command `man ls` on the command line will yield the following:

![man page for ls](/assets/man.png)

Even though man pages can be hard to read for beginners, they usually offer the most comprehensive documentation available for a specific command.

The "name" section gives you an overall understanding about that the command does. "Synopsis" tells how you can call the program. In the case of the command `ls` for example, the options should be given to the command before the file path. Both the options and the file name are optional parameters, which is why they're written inside square brackets.

<div class="note">
You can browse the <code>man</code> page using the arrow keys, and exit by pressing <code>q</code>.
</div>

Options are sometimes given two forms: a short form, which is usually just on character, and a long one. The short form is given to the command with just one dash (-), and the long form using two dashes (--). The `man` page displays both options, as you can see in the image above.

Note that if you want to give a command an argument, which contains spaces, it has to be given inside quotation marks. Otherwise the command line will interpret it as a separate command or argument.

```
ls "i am a badly named file"
```

tai

```
ls 'i am a badly named file'
```

<div class="note">
The names of commands are usually abbreviations of english words. "man" stands for "manual", "ls" for "list", and so on. You can find the origins for some commands in this material, in the hope of making them easier to remember.
</div>

<h2> File management using the command line</h2>

You can browse and manage files using the command line just as in the graphical environment. Let's compare managing files using a graphical and a text user interface.

Open the graphical file browser. In ubuntu, open the application called "Files", or write the command `nautilus` and press <kbd>ENTER</kbd>. `nautilus` won't work in Windows. In MacOS, open finder and press the keys `Shift + Cmd + H`.

You should now be in your _home folder_. The home folder holds all the personal files and folders of a user. If you are using one of the department's computers, the contents of your home folders are the same, regardless of which physical computer you are using. This is because the contents are fetched from elsewhere. If you are using your personal computer, the home folder only includes the files on that physical computer.

Note thath if you opened the graphical file browser using the command line, the shell is "locked", and you can't run any other commands using that window. You can close the currently running program by pressing <kbd>CTRL + C</kbd>. You can press the keys repeatedly if necessary.

<div class="note">
Because the combination <kbd>CTRL + C</kbd> has a special meaning on the command line, in Linux you will have to use <kbd>CTRL + SHIFT + C</kbd> to copy selected text and <kbd>CTRL + SHIFT + V</kbd> to paste.
</div>

Your home folder probably contains a bunch of miscellanous files and folders, like _Downloads_ and _Documents_. Open the command line in order to see the same folders on the text-based interface. You can do this by writing down `ls` and pressing <kbd>ENTER</kbd>. The output should something like this:

```bash
user@lcomputers:~$ ls
Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos
```

You'll notice how `ls` lists out all the files and folders in your home folder. You should see the same ones as in the graphical user interface, only in a simpler form.

By default the command line opens up the home folder. In order to visit other foldersS, you need a command for changing directories. This can be done with `cd`, abbreviated from **c**hange **d**irectory. The `cd` command is given the directory where you want to go as an argument. If you don't give `cd` any arguments, it will take you to the home folder.

Now navigate to the _Downloads_ folder by running `cd Downloads`. Note that the command is _case sensitive_, so the folder name should be given exactly correctly. After running `cd`, your command line should look like this:

```bash
user@computer:~/Downloads$
```

The part after `:` is the current, active folder. `~` refers to the user's home folder.

Run the command `ls` again. You have now changed directories, so the output should be different from last time.

The command `ls` can also display more specific information. Move back to the home folder, keeping the graphical user interface open next to the command line, and run `ls -a`. Notice how you can now see a lot more information on the commnad line compared to the file browser. This is due to the option `-a`. When using it, `ls` shows all the files in a folder, including the _hidden_ ones.

In a Unix environment, a hidden file or folder means that it starts with a dot (.), for example `.config`. Hidden files usually contain settings and information, that the user rarely needs to change. In linux, it is possible to see hidden files in the graphical user interface by pressing <kbd>CTRL + h</kbd>. If you're using MacOS, press <kbd>cmd + SHIFT + .</kbd>

In the graphical user interface, you can create folders by right-clicking with your mouse, and pressing "create new folder". In a Unix-like environment, this is done with the command `mdkir`, abbreviated from "make directory". The command is given the name of the folder as an argument.

In the end, the command line works in a similar way to the graphical user interface: `cd` is the same as clicking a folder and `ls` shows the contents of a folder. In this part, you will learn how to things you already know how to do in a graphical environment using the command line.

<div class="exercise">
<h3>Exercise 1: Graphical vs. text-based user interface {% include points.html text="5%" %}</h3>

You can mark this exercise as done after you've gone through the previous example of the differences between the graphical and text-based user interfaces. Make sure you replicated the examples yourself using the command line.</div>

<div class="exercise">
<h3>Exercise 2: Creating a folder {% include points.html text="5%" %}</h3>
Create a folder named "lapio" in your home folder. Make sure you crated the folder correctly by checking the output of <code>ls</code>.
</div>

If you're used to using the graphical file browser, you're probably wondering how slow and inefficient using the command line must be. It is naturally a question of custom, but there's also one feature on the command line, which makes writing commands a lot faster: tab completion. With the tab key you can automatically complete filenames (and sometimes even commands, depending on the program) when using a command.

Let's try tab completion. Nagivate to your home folder. First, write down `cd D` and press the tab key (located above <kbd>CAPS LOCK</kbd>) a couple of times. All the directories starting with the letter "D" should be printed to the command line, including at least `Downloads` and `Documents`.

Let's assume that you want to move to the `Downloads` folder. It suffices to write down "Dow", and press the tab key, and the rest of the folder name will be completed to the command line (assuming that there are no other folders starting with "Dow" in your home folder).

Another useful trick to know is browsing old commands. This can be done by pressing the arrow key up and down. This is a useful habit you should try and adopt as early as possible. Note that when you are writing a command, you cannot use the cursor to move in the written text. You have to use the arrow keys instead, for example. You can read more about other useful keyboard combinations [here](https://unix.stackexchange.com/a/255716).

<h2>Text processing</h2>

Gedit is a simple graphical text editor, which allows you to edit all kinds of text files. You can find gedit in Linuc by writing "gedit" to the Launcher, opened by pressing the "Windows" key. In MacOS we recommend using the application "TextEdit" for this section of the material, as it allows defining the saving location of a file, and you will be able to find it easily using the command line.

Open a graphical text editor and create a file called `example.txt`. Save it in the `lapio` folder you created earlier. The `.txt` is a file extension, which means that the file contains ordinary text, and not runnable code for example. Add some arbitrary text to the file.

After creating the `example.txt` file, navigate to the `lapio` folder and open it with the command `nano example.txt`. Nano is a text-based text editor, which is used from the command line. This means that the editor is controlled using specific key combinations instead of clicking on buttons.

In order to close the editor, you have to press <kbd>CTRL + X</kbd>. If some changes have been made, you have to confirm whether you wish to save or discard them, by pressing `y` for "yes" or `n` for "no". Lastly, the editor confirms the name of the saved file.

Note that `nano` helps you by telling the keys for specific actions at each step. This is rather common, which is why it is important to learn to read the outputs of the command you are using (as simple and stupid as it may sound). Usually the program tells your directly, which keys you should press next.

<div class="note">
If you see the error message  <code>nano: command not found</code>, nano is not installed in your system. The easiest way to install it is by using a package manager. See the end of the part for some instructions on installing applications via the command line.
</div>

<div class="note">
In Windows you can use a program called notepad instead of gedit. It should be installed to your system by default. However, we recommend the <a href="https://notepad-plus-plus.org/">notepad++</a> editor. Windows handles line breaks differently from Unix systems: In Windows, the line break symbol is <code>\r\n</code> whereas in Unix it's <code>\n</code>. Thus inspecting Windows documents created with notepad can look bizarre when accessing them using the Ubuntu command line.

<br/><br/>
Below are some instructions on creating a file using notepad++ with Unix new lines.

<img alt="Changing the new line symbol with notepad++" src="/assets/notepad++_lf.png" />
<br/>

Note that the file you created with notepad has been created as a Windows user. In Windows 10, the command line is used as a separate Unix user. You can find the Windows user's files from the directory <code>/mnt/c</code>, if you saved them to the C drive.
</div>

<div class="exercise">
<h3>Exercise 3: nano {% include points.html text="5%" %}</h3>

Find out how the text editor <code>nano</code> works by using Google or the <code>man</code> command. Make sure you know how to do at least the following things:

<ul>
<li> Sainvg a file without closing nano</li>
<li> Copying and pasteing in nano</li>
</ul>

Test out the procedures in practice! For example, open a file <code>example.txt</code>, add some text into it and save without closing. Then open the file using another text editor to make sure that the contents were saved.

</div>

<div class="exercise">
<h3>Exercise 4: vim {% include points.html text="5%" %}</h3>

Another command line text editor with a lot more features is <a href="https://en.wikipedia.org/wiki/Vim_(text_editor)">vim</a>. However, it is notoriously unintuitive to use at first. Find out the following things about using vim:

<ul>
<li>What are "insert mode" and "command mode"?</li>
<li>How can you switch between then?</li>
<li>How can you close vim? <br></li>
</ul>
</div>

<h2> Paths</h2>

A path is a pointer to a specific file or folder in a file system. It is like an address, which allows one to uniquely identify the location of a desired resource. It consists mostly of filenames and slashes (`/`). Paths are often used as command arguments.

A path can be _relative_ or _absolute_: A relative path is interpreted with respect to the current folder, whereas an absolute path is interpreted with respect to the _root folder_, or sometimes just _the root_. The root folder contains all the files and folders of the system, and it should not be confused with the personal _home folder_. The root folder contains all the users' home folders. In consequence, an absolute path to a specific file is the same no matter which folder in the system it is written in. A reltavite path to the same folder however depends on the current folder.

<div class="warning">
Be careful with the root! Some of it's contents are vital to the computer. Don't delete or move folders in the root without a good reason.
</div>

An absolute path always start with the slash symbol `/`, because the absolute path of the root is `/`. If a path isn't started with a slash the system will interpret that the user is referring to a file or folder in the current folder. The absolute path of the current folder can be printed out with `pwd` (**p**rint **w**orking **d**irectory). In linux, the home folder of a user is usually located in `/home/user/`, and in `/Users/user/` in MacOS. In both systems the home folder can be referred to with `~`. For example, the path to the Downdloads folder in Linux would be either `/home/user/Downloads` or `~/Downloads`.

Dots are often used in relative paths. One dot `.` refers to the current folder, and two dots `..` refers to the folder the current folder is in, or its "mother folder". For example running `cd ../..` would move the user two folders up. The relative path of the Downloads folder from the home folder is `./Downloads` or just `Downloads`.

Here is a longer example of using absolute and relative paths:

Let's assume that you have downloaded cat pictures for each year of the month. The pictures of each month are in their own folders, all located in a subfolder of Downloads. You have moved to the folder which contains all the cute pictured for May, whose path is `~/Downloads/cat-pictures/may/`. Given that you are _inside_ the May folder, you can refer to the Downloads folder with the path `../..`, `~/Downloads` or `/home/user/Downloads` in Linux and `/Users/user/Downloads` in MacOS. If you wish to refer to the November folder from the May folder, you can do so for example with the path `../marraskuu/`. The slash at the end of the path highlights that the resource in question is indeed a folder, but it is not necessary for the path to work.

```bash
user@computer:~/Downloads/cat-pictures/may$ ls
cat1.jpg
user@computer:~/Downloads/cat-pictures/may$ cd ../../
user@computer:~/Downloads$ cd cat-pictures/may/
user@computer:~/Downloads/cat-pictures/may$ cd ../november/
user@computer:~/Downloads/cat-pictures/november$ ls
cat2.jpg
```

<div class="note">
<strong>Remember to use tab completion when writing paths!</strong> In addition, the command line shows you the path of the current folder with respect to your home folder. This makes it easier to navigate and write paths in the command line.
</div>

<div class="exercise">
<h3>Exercise 5: File management 1 {% include points.html text="5%" %}</h3>

In this exercise you'll practice file management from the command line. Start by creating a folder structure described in the figure below:

<img src="/assets/file_management_1.png" alt="Figure describing the starting position"/>

<p>
In the folder structure the directory <code>school</code> contains three folders: <code>lapio</code>, <code>CS1</code> and <code>CS2</code>. The <code>lapio</code> folder contains a file called <code>cmnd-line.txt</code>, the <code>CS1</code> folder contains <code>lecture1.txt</code> and the <code>CS2</code> folder contains the files <code>lecture2.txt</code> and <code>java.txt</code>.

<br><br>

First create the <code>school</code> folder and move inside it. Then create the folder structure described above. Create some of the files and folders directly from the <code>school</code> folder, by using longer paths, and some by moving into the subfolder before creating a new file.
</p>

<p class="note">
You can create a text file by opening it in a text editor and saving, or with the command <code>touch</code>.</p>

Make sure you've created all the proper files and folders with <code>ls</code>.
</div>


<h2> Moving and renaming files</h2>

In a graphical environment copying is done with the key combination <kbd>CTRL + C</kbd>, cutting with <kbd> CTRL + X</kbd> and pasteing is done with <kbd>CTRL + V</kbd>. Let's see how these three procedures can be done using the command line.

Copying is done using the command `cp` (<b>c</b>o<b>p</b>y). It takes the path to the file to be copied and the target path as arguments. For example, `cp example.txt example2.txt` copies the file `exapmle.txt` as a file called `example2.txt` in the current folder. Paths also allow you to move files between folders. Running `cp example.txt ~/Documents/example2.txt` moves the file `example.txt` to the `Documents` folder and renames it to `example2.txt`. Giving an existing folder as the second argument copies the file without changing its name: `cp example.txt ~/Documents/` copies the file to `Documents` and keeps the name as `example.txt`.

Files and folders can be moved with the command `mv` (<b>m</b>o<b>v</b>e). The command works in a very similiar way to `cp`, except that the original file is deleted from the system after copying it. This corresponds to the "cutting" feature in a graphical user interface. One can also rename files using `mv`: if the second argument points to the same folder as the first one, the result is a renamed file.


Examples of using `mv`:

`mv exmple.txt example.txt` renames the file `exmple.txt` to `example.txt`.

`mv example.txt ~` moves the file `example.txt` from the current folder to the home folder.

`mv exmple.txt ~/example.txt` renames the file `exmple.txt` from the current folder to `example.txt` and moves it to the home folder.

`mv ~/example.txt ~/Downloads/` moves the file `example.txt` from the home folder to the `Downloads` folder.

<div class="exercise">
<h3>Exercise 6: File management 2 {% include points.html text="5%" %}</h3>

This exercise continues where the previous exercise left off.

After creating the initial folder structure, change it to the following with commands <code>mv</code> and <code>cp</code>:

<p><img src="/assets/file_management_2.png" alt="Target folder structure"/></p>

The folder <code>lapio</code> should now contain a file called <code>command-line.txt</code>. The folder <code>CS1</code> should contain a file called <code>intro.txt</code>, and the folder <code>CS2</code> the files <code>lecture1.txt</code> and <code>lecture2.txt</code>.

<br><br>

Notice that the awkward typo in <code>cmnd-line.txt</code> has been fixed. The file <code>java.txt</code> was moved and renamed to the file <code>CS1</code>.
</div>

<div class="exercise">
<h3>Exercise 7: Removing a folder {% include points.html text="5%" %}</h3>

Files can be removed with the command <code>rm</code> (<b>r</b>e<b>m</b>ove).

<ol>
<li>By using the command line, remove the files you created in the previous exercise. </li>
<li>Find out how you can remove a folder from the command line.</li>
<li>Remove the whole <code>school</code> folder.</li>
</ol>
<div class="warning">Note that when you remove something on the command line, it is not moved to the rubbish bin, but deleted right away.</div>

</div>

<h2> Wild cards</h2>

_Wild cards_ allow one to perform operations on several files at the same time. Their use is supported by almost all commands in the Unix environment, unlcuding `mv` and `cp`. Perhaps the most common wild card `*` corresponds to any amount of any given symbol. It can be used at any point of a string. For example the command `mv *.txt example/` moves all the files in the current directory ending with `.txt` to a folder caller `example`. Similarly `mv test* tests/` would move all the files starting with `test` to a  folder called `tests`.


```bash
user@hal9000:~/example$ ls
target file.txt note.txt picture.png
user@hal9000:~/example$ mv *.txt target/
user@hal9000:~/example$ ls
target toinen.png
```

<div class="exercise">
<h3>Exercise 8: Wild cards {% include points.html text="10%" %}</h3>
Create a file called <i>pictures</i> on the command line, and download a <code>jpg</code> and a <code>jpg</code> formatted picture. Then add some text files to the folder, for example <code>i_am_a_file.txt</code> or <code>i_am_not_a_picture.txt</code>. Finally create a folder called <code>pictures</code> and copy all the pictures in the subfolder using wild cards. You can read about other wild cards from <a href="http://www.linfo.org/wildcard.html">here</a> for example.
</div>

<h2> Other useful commands</h2>

Sometimes one might one to examine text files without opening a text editor. The easiest command for doing this is `cat`, which prints tout the contents of a text file:

```
user@hal9000:~/esimerkki$ cat example.txt
i am 
inside
the example file
```

However, if the text file is large, we might not want to print out all the lines. Using `head` or `tail` one can print only a specific amount of lines from the beginning or end of a file. The amount of lines printed is given to a parameter for the flag `-n`.

For example you can only print the first and the last rows with:

```
user@hal9000:~/example$ tail -n 1 example.txt
the example file
user@hal9000:~/example$ head -n 1 example.txt
i am
```

In the above example we gave 1 as an argument for the flag `-n`.

It is also possible to search for specific lines in a file. This can be done with the commans `grep` (search <b>g</b>lobally for a <b>r</b>egular <b>e</b>xpression and <b>p</b>rint). The command `grep` allows you to filter out specific lines from a file based on some criteria. By default `grep` returns all the **lines** which contain the exact string given as an argument. Here is an example demonstrating the basic functionality:

```
user@hal9000:~/example$ cat diary.txt
October 6th

Dear diary,

I can't wait to tell you all my secrets. 

Today was a good day. I was appointed the secretary of my student association.

I won't be secretive, I'm so happy!

I'll write again soon.
user@hal9000:~/example$ grep "secret" diary.txt 
I can't wait to tell you all my secrets. 
Today was a good day. I was appointed the secretary of my student association.
I won't be secretive, I'm so happy!
```

Note that the filtering also included occurences inside another string. In most environments grep also highlights the found words with red:
![grep-example](/assets/secret.png){:class="img-responsive"}

<div class="exercise">
<h3>Exercise 9: grep {% include points.html text="10%" %}</h3>
By default <code>grep</code> is case sensitive, which means that it treats "a" and "A" differently when searching for matches.

<ul>
<li>Take a look at the output of <code>grep --help</code> or grep's <code>man</code> page, and find out how you can make grep ignore case.</li>

<li>Find out (using Google for example) how you can only match occurences which are at the beginning of a line. Make sure you understood how to do this by practicing. You can for example write the following to a file:</li>
</ul>
</div>
```
Unix
Linux
macOS
UNiX
unique-unix
unIX
Operating system unix
UNIX
unix
unisport
```
<div class="exercise">
and then make sure you can filter out the appropriate words with grep.
</div>

<div class="note">
When looking for information on the internet about any commands, always make sure you test out their functionality on the command line. This makes it easier to notice if you've misunderstood something.
</div>

The true power of tools like `grep` comes out when it is paired with other commands. The output of another command can be passed on to another command with the operator `|`, usually called _the pipe_. With the pipe you can do more complicated operations which require several programs with just one line.

An example of using a pipe is to pass the output of `ls` to `grep` in order to filter out specific filenames:

```
user@hal9000:~/example$ ls
example.txt note2.txt note.txt
user@hal9000:~/example$ ls | grep note
note2.txt
note.txt
```

If one couldn't use the pipe, the output of `ls` would have had to be written to a separate file before filtering with grep. The pipe allowed sharing the output of `ls` between the commands seamlessly.

However, sometimes writing outputs to files can be useful. The size of a terminal window is limited, and its contents cannot be scrolled backwards infinitely. Large outputs should be written to files in order to access tehm fully. This can be done with the operator `>`, which takes the name of the file to be written as an argument. For example `ls > listing.txt` moves the file listing to a file called "listing.txt", creating the file if it doesn't already exist.

Similarly, the operator `<` allows giving the contents of files as an argument to a command. This is again useful, if the input in question is too large to paste or the task has to be automated.

```
user@hal9000:~/example$ ls 
Applications	Library		      Pictures	      kissakuvia
Desktop		    Linus_Torvalds	Public          script.sh
Documents	    Movies	        Downloads	Music
user@hal9000:~/example$ ls | grep Do
Documents
Downloads
user@hal9000:~/example$ ls > listing.txt
user@hal9000:~/example$ grep Do listing.txt 
Documents
Downloads
user@hal9000:~/example$ 
```

<div class="note">
The operator <code>></code> overwrites the contents of the file with the given text and <code>>></code> appends them to a new line, not affecting the old contents.
</div>

<div class="exercise">
<h3>Exercise 10: A student's notes {% include points.html text="5%" %}</h3>
Create a text file called <code>notes.txt</code> on the command line. Paste inside the following text which describes the week of a typical student:
</div>
```
monday intro to java: Java is a programming language
monday unicafe: Fish shoup
tuesday intro to java: A class can implement an interface
tuesday intro to cs: Turing tests are hard to pass
tuesday unicafe: Chicken and noodles
wednesday intro to java: A java program has to have a main method
wednesday intro to cs: The internet is a big place
wednesday unicafe: beans and rice
thursday unicafe: Hernekeittoa ja pannukakkua
thursday lapio: The command line is a black box
friday unicafe: Pizza
```
<div class="exercise">
Then separate the menu of this week to its own file <code>unicafe.txt</code>. You don't have to remove the menu from the <code>notes</code> file. Also separate the notes concerning the course Introduction to Java.
</div>

<h2> SSH-yhteys</h2>

Olemme tÃ¤hÃ¤n asti kÃ¤yttÃ¤neet komentoriviÃ¤ lÃ¤hinnÃ¤ omalla koneella olevien asioiden tarkasteluun. KomentoriviltÃ¤ voidaan kuitenkin ottaa myÃ¶s yhteys toiseen computereseen. SSH on salattu yhteystyyppi, joka mahdollistaa jÃ¤rjestelmÃ¤Ã¤n kirjautumisen etÃ¤nÃ¤ komentorivin kautta. Salattu yhteys tarkoittaa, ettÃ¤ tietoa ei jaeta suoraan luettavassa muodossa: tarkoitus on, ettÃ¤ vain valikoidut vastaanottajat pystyvÃ¤t purkamaan salauksen ja lukemaan sisÃ¤llÃ¶n.

Unix-ympÃ¤ristÃ¶ssÃ¤ ssh-yhteyden voi luoda komennolla `ssh`. Komennon perustoiminnalisuus on seuraava: `ssh user@palvelimen.osoite` ottaa yhteyden palvelimeen osoitteessa `palvelimen.osoite` ja yrittÃ¤Ã¤ kirjautua tunnuksella `user`. KÃ¤yttÃ¤jÃ¤ltÃ¤ pyydetÃ¤Ã¤n tunnuksen salasanaa, ja autentikoinnin onnistuessa yhteys avautuu. TÃ¤mÃ¤n jÃ¤lkeen komentoriviltÃ¤ voidaan ajaa tavalliseen tapaan komentoja, mutta nykyinen kansio sijaitseekin palvelimella, johon yhteys on luotu.

TietojenkÃ¤sittelytieteen osasto tarjoaa neljÃ¤ eri palvelinta osaston koneisiin etÃ¤yhteyden luomiseksi. NÃ¤ille palvelimille kirjaudutaan yliopiston tunnuksilla:

1.  melkki.cs.helsinki.fi
2.  melkinpaasi.cs.helsinki.fi
3.  shell.cs.helsinki.fi
4.  melkinkari.cs.helsinki.fi

Kaikki nÃ¤mÃ¤ palvelimet ohjaavat siis samaan kÃ¤yttÃ¤jÃ¤kohtaiseen kotihakemistoon, johon pÃ¤Ã¤see kaikilta osaston koneilta.

KÃ¤ytetÃ¤Ã¤n `ssh`-komentoa osaston koneelle yhteyden ottamiseen:

```
user@hal9000:~$ ssh user@melkki.cs.helsinki.fi
user@melkki.cs.helsinki.fi's password:
```

<div class="note">Huomaa, ettÃ¤ salasanaa kirjoittaessasi on normaalia, ettÃ¤ komentoriville ei ilmesty tekstiÃ¤.</div>

Kun yhteys on muodostettu, nÃ¤yttÃ¤Ã¤ komentorivi erilaiselta:

```
user@melkki:~$
```

Komentorivin nykyinen kansio on siis muuttunut osaston koneiden kotihakemistoksi ja pÃ¤Ã¤set kÃ¤siksi kaikkiin osaston koneella sijaitseviin tiedostoihin. Yhteyden voi lopettaa komennolla `exit`.

Voit lukea SSH:sta lisÃ¤Ã¤ esimerkiksi [tÃ¤Ã¤ltÃ¤](https://www.ssh.com/ssh/).

<h2> SSH-avainpari</h2>

Ã„sken yhteys osaston koneeseen autentikoitiin osaston tunnuksilla. SSH-yhteys tarjoaa kuitenkin myÃ¶s toisen tavan tunnistaa kÃ¤yttÃ¤jÃ¤: julkinen ja yksityinen avainpari. KÃ¤ytÃ¤nnÃ¶ssÃ¤ avaimilla tarkoitetaan kahta pitkÃ¤Ã¤ ja satunnaiselta vaikuttavaa merkkijonoa, joita kÃ¤ytetÃ¤Ã¤n yhdessÃ¤ varmistamaan, ettÃ¤ vain halutuilla henkilÃ¶illÃ¤ on pÃ¤Ã¤sy tiettyyn tietoon. KyseessÃ¤ on salauksen tekniikka, joka ei kuulu sen enempÃ¤Ã¤ tÃ¤mÃ¤n kurssin aihealueisiin, mutta voit etsiÃ¤ asiasta lisÃ¤Ã¤ tietoa avainsanoilla _public key encryption_ ja _asymmetric cryptography_. **RiittÃ¤Ã¤ ymmÃ¤rtÃ¤Ã¤, ettÃ¤ yksityisen avaimen tulisi olla vain sen omistajan tiedossa, ja julkista avainta voi jakaa huoletta.**

SSH-avainparin voi luodan komennolla `ssh-keygen`. Komento kysyy avaimelle salasanaa ja tallennuspaikkaa. Oletussijaintia tai tiedoston nimeÃ¤ ei lÃ¤htÃ¶kohtaisesti tarvitse muuttaa, jolloin avain luodaan kotihakemistossa sijaitsevaan `.ssh`-kansioon.

<div class="warning">KÃ¤ytÃ¤ SSH-avainta luodessasi aina salasanaa. Jos kÃ¤ytÃ¤t SSH-avainta osaston palvelimien kanssa, on salasanan asettaminen pakollista yliopiston mÃ¤Ã¤rÃ¤ysten mukaan.</div>

```
user@hal9000$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/user/.ssh/id_rsa): /home/user/.ssh/id_rsa_test
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/user/.ssh/id_rsa.
Your public key has been saved in /home/user/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:asdasdadsfasdasdasdasdasdasd
The key's randomart image is:
+---[RSA 2048]----+
|    .      ..oo..|
|   . . .  . .o.X.|
|    . . o.  ..+ B|
|   .   o.o  .+ ..|
|    ..o.S   o..  |
|   . %o=      .  |
|    @.B...     . |
|   o.=. o. . .  .|
|    .oo  E. . .. |
+----[SHA256]-----+
```

Komento luo `.ssh`-kansioon kaksi tiedostoa, joista toisen pÃ¤Ã¤te on `.pub`. TÃ¤mÃ¤ `.pub`-pÃ¤Ã¤tteinen tiedosto sisÃ¤ltÃ¤Ã¤ julkisen avaimen, jonka voit turvallisesti jakaa muille. Toinen, pÃ¤Ã¤teetÃ¶n tiedosto sisÃ¤ltÃ¤Ã¤ yksityisen avaimen, jota kannattaa kohdella samalla varovaisuudella kuin tavallista salasanaa.

Avainparilla kirjautuminen on mahdollista, kun julkinen avain lisÃ¤tÃ¤Ã¤n palvelimelle, jolla avainparilla halutaan autentikoitua. TÃ¤llÃ¶in kyseiseen jÃ¤rjestelmÃ¤Ã¤n pÃ¤Ã¤see kirjautumaan, jos tietÃ¤Ã¤ julkista avainta vastaavan yksityisen avaimen. Julkinen avain lisÃ¤tÃ¤Ã¤n polkuun `~/.ssh/authorized_keys`, siis kotihakemiston kansioon `.ssh`, tiedostoon nimeltÃ¤ [authorized_keys](https://www.ssh.com/ssh/authorized_keys/). MikÃ¤li kÃ¤ytÃ¤t useita avaimia, jokainen lisÃ¤tÃ¤Ã¤n omalle rivilleen. Yliopiston palvelimella joudut luultavasti luomaan kansion ja tiedoston itse.

![Kuva SSH-avaimen kÃ¤ytÃ¶stÃ¤](/assets/ssh-selitys.png){:class="img-responsive"}

Julkisen avaimen saa siirrettyÃ¤ kohdepalvelimelle esimerkiksi komennolla <code>scp</code>, jonka avulla on mahdollista kopioida tiedostoja palvelimelta toiselle (vertaa komentoon `cp`). Komentoa kÃ¤ytetÃ¤Ã¤n seuraavasti:

```
scp polku/kopioitavaan/tiedostoon user@palvelmen.osoite:polku/kohdekansioon
```

Huomaa palvelimen osoitteen jÃ¤lkeen lisÃ¤ttÃ¤vÃ¤ kaksoispiste!

<div class="note">

Voit esimerkiksi kopioida julkisen avaimen kohdepalvelimen kotihakemiston <code>.ssh</code>-kansioon (joudut luultavasti luomaan sen itse), ja sen jÃ¤lkeen uudelleennimetÃ¤ avaintiedoston sopivasti.

<br/>
<i>
Kannatta myÃ¶s kokeilla, miten <code>scp</code> toimii, jos kohdekansiota ei ole olemassa.
</i>
</div>

Julkisen avaimen kopioimisen voi myÃ¶s delegoida komennolle [ssh-copy-id](https://www.ssh.com/ssh/copy-id).

Autentikaatio toimii oikein, kun otettaessa SSH-yhteyttÃ¤ yliopiston koneisiin pÃ¤Ã¤see kirjautumaan SSH-avaimelle antamalla salasanalla yliopiston kÃ¤yttÃ¤jÃ¤tunnuksen sijaan.

Jotta et joudu kirjoittamaan salasanaa joka kerralla, kannattaa yksityinen avain lisÃ¤tÃ¤ ssh-agentille, jolloin salasana tarvitsee kirjoittaa vain kirjauduttuasi jÃ¤rjestelmÃ¤stÃ¤ ulos. TÃ¤mÃ¤ tapahtuu kahdella komennolla:

```
# varmistetaan, ettÃ¤ ssh-agentti on toimintavalmiudessa
eval `ssh-agent`
# olettaen, ettet muuttanut yksityisen avaimen polkua sitÃ¤ luodessasi
# muuten anna argumentiksi yksityisen avaimen polku
ssh-add
```
<div class="note">
`ssh-keygen`-komento kannattaa ajaa vivuilla <code>-t rsa -b 4096</code>. Ne varmistavat, ettÃ¤ kÃ¤ytetty salausalgoritmi on <a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)">RSA</a> ja ettÃ¤ avaimesta tulee 4096 bittiÃ¤ pitkÃ¤. Pitempi pituus tekee RSA:lla luodusta avaimesta turvallisemman.
</div>

Voit lukea lisÃ¤Ã¤ SSH:n konfiguroimisesta esimerkiksi [tÃ¤Ã¤ltÃ¤](https://linux.fi/wiki/SSH).

<div class="exercise">
<h3>Exercise 11: SSH-yhteys {% include points.html text="10%" %}</h3>

Luo koneellesi SSH-avainpari. Mahdollista sen jÃ¤lkeen avainparilla kirjautuminen yliopiston palvelimille SSH-yhteyttÃ¤ luodessa. Testaa sen jÃ¤lkeen avainparia. MikÃ¤li mahdollista, ota yhteys muulta, kuin osaston koneelta. Jos sinulla ei ole pÃ¤Ã¤syÃ¤ yliopiston palvelimille, eli sinulla ei ole yliopiston userta, voit merkitÃ¤ Exercisen tehdyksi luotuasi SSH-avaimen.

<div class="note">
MikÃ¤li teet Exercisen laitoksen koneella, yhteys kÃ¤yttÃ¤ytyy oudosti, koska otat oikeastaan yhteyttÃ¤ samalle koneelle. TodennÃ¤kÃ¶isesti SSH-avaimen salasanaa ei pyydetÃ¤, vaikka se olisi asetettu oikein.
</div>

<div class="note">
MikÃ¤li loit avainparin itse mÃ¤Ã¤rittelemÃ¤Ã¤si polkuun, ja yhteys kysyy vielÃ¤ yliopiston salasanaa, tarkenna yksityisen avaimen polku:

<div>
<code>ssh -i polku/yksityiseen/avaimeen user@kohde.palvelimen.osoite</code>
</div>
</div>
</div>

<h2> Wget</h2>

Graafisessa ympÃ¤ristÃ¶ssÃ¤ selain antaa tarkastella sivuja internetissÃ¤. KomentorivillÃ¤ toimivien ohjelmien on vaikeaa nÃ¤yttÃ¤Ã¤ internet-sivuja samoin kuin graafinen selain, ([joskin se on mahdollista](https://en.wikipedia.org/wiki/Text-based_web_browser)) mutta pohjimmiltaan nettisivu internetissÃ¤ on vain tiedosto, jonka voimme toki ladata koneellemme tarkasteltavaksi.

Tarvittavan komennon nimi on `wget` (alunperin _world wide web get_), ja se toimii yksinkertaisimmillaan `wget sivun.osoite`, joka lataa annetun sivun koneellesi. Internet-sivut on tehty HTML-kielellÃ¤, johon tutustumme seuraavassa osassa, joten saat kutsun tuloksena koneellesi `.html`-pÃ¤Ã¤tteisen tiedoston.

<div class="exercise">
<h3>Exercise 12: Wget ja HTML-koodi {% include points.html text="10%" %}</h3>

<ol>
<li>Lataa mieleisesi sivusto koneellesi <code>wget</code>-komennolla</li>
<li>Avaa tallennettu <code>.html</code>-pÃ¤Ã¤tteinen tiedosto selaimella, esim Firefoxilla tai Chromella (saat tiedoston helpoiten selaimella auki graafisesta tiedostonhallinnasta). Sivu nÃ¤yttÃ¤Ã¤ luultavasti hieman erilaiselta kuin yleensÃ¤. </li>
<li> Avaa tiedosto niin, ettÃ¤ nÃ¤et sen sisÃ¤llÃ¤ olevan HTML-koodin (toisin sanoen avaa se niin, ettÃ¤ nÃ¤et tiedoston sisÃ¤llÃ¶n koodina, eikÃ¤ tiedosto aukea selaimessa).</li>
<li>MikÃ¤ oli ohjelma, jota kÃ¤ytit kussakin tapauksessa tiedoston avaamiseen? Mieti, miten ohjelma kÃ¤sitteli tiedoston sisÃ¤llÃ¶n.</li>
</ol>

Tutustumme HTML-kieleen ja verkkosivuihin kolmannessa osassa, jossa opit myÃ¶s kirjoittamaan HTML-dokumentteja.

</div>

<div class="exercise">
<h3>Exercise 13: Wget, grep ja Linus Torvalds {% include points.html text="10%" %}</h3>

<p>
TÃ¤ssÃ¤ ExercisessÃ¤ lasketaan, monellako rivillÃ¤ Linus Torvaldista kertovassa artikkelissa esiintyy sana "Linux".
</p>

<ol>
<li>Hae wgetillÃ¤ Linus Torvaldsista kertova <a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Wikipedia-artikkeli</a> koneellesi.</li>
<li>Hae syntyneestÃ¤ tiedostosta <code>grep</code>-komentoa kÃ¤yttÃ¤en ne rivit, joissa lukee "Linux". Kirjoita nÃ¤mÃ¤ rivit tiedostoon.</li>
<li>Etsi sitten netistÃ¤, miten voit laskea tulosteen tai tiedoston rivien mÃ¤Ã¤rÃ¤t, ja laske monellako rivillÃ¤ sana "Linux" esiintyy.</li>
</ol>

MikÃ¤li haluat, voit yrittÃ¤Ã¤ tehdÃ¤ saman Exercise ilman, ettÃ¤ kirjoitat mitÃ¤Ã¤n vÃ¤lissÃ¤ tiedostoon.

</div>

<h2> Oikeudet</h2>

Unix-tyyppisissÃ¤ jÃ¤rjestelmissÃ¤ kÃ¤yttÃ¤jÃ¤t omaavat tiettyjÃ¤ oikeuksia tiedostojen ja kansioiden muokkaamista ja katsomista varten. Esimerkiksi jos useampi ihminen kÃ¤yttÃ¤Ã¤ samaa jÃ¤rjestelmÃ¤Ã¤, kuten osaston koneita kÃ¤ytetÃ¤Ã¤n, on tarve mÃ¤Ã¤rittÃ¤Ã¤ mitÃ¤ kukakin kÃ¤yttÃ¤jÃ¤ pystyy lukemaan, kirjoittamaan ja suorittamaan.

Lukuoikeus antaa kÃ¤yttÃ¤jÃ¤n tarkastella tiedoston sisÃ¤ltÃ¶Ã¤, kun taas kirjoitusoikeuden omaava kÃ¤yttÃ¤jÃ¤ pystyy muokkaamaan sitÃ¤. Suoritusoikeus taas tarkoittaa, ettÃ¤ jos kyseinen tiedosto on esimerkiksi ohjelma, on se mahdollista ajaa. Kansioilla on oltava suoritusoikeus, jotta niiden sisÃ¤Ã¤n voidaan siirtyÃ¤ esimerkiksi `cd`-komennolla. MikÃ¤li kÃ¤yttÃ¤jÃ¤llÃ¤ ei ole tarvittavia oikeuksia yrittÃ¤mÃ¤Ã¤nsÃ¤ operaatioon, antaa jÃ¤rjestelmÃ¤ yleensÃ¤ virheviestin `Permission denied`.

Jokaisella tiedostolla ja kansiolla on omat oikeutensa. LisÃ¤ksi niillÃ¤ on myÃ¶s omistaja. KÃ¤yttÃ¤jÃ¤, joka loi tiedoston, on oletuksena sen omistaja (joskin omistajuutta voi myÃ¶s vaihtaa).

Oikeudet ja omistajuudet selviÃ¤vÃ¤t `ls`-komennon `-l`-vivun avulla. TÃ¤ltÃ¤ nÃ¤yttÃ¤vÃ¤Ã¤ komennon tuloste "esimerkki"-kansiolla:

```
user@hal9000:~/esimerkki$ ls -l
total 8
-rw-r--r-- 1 user user 16 touko 31 21:41 esimerkki.txt
-rwxr--r-- 1 user user 0 kesÃ¤ 14 17:25 muistio.txt
-r--r--r-- 1 user user 0 touko 3 23:13 artikkeli.txt
drwx------ 2 user user 130 kesÃ¤ 14 17:54 pÃ¤ivÃ¤kirjamerkinnÃ¤t
```

EnsimmÃ¤inen sarake, joka sisÃ¤ltÃ¤Ã¤ hassuja sekoituksia kirjaimista ja merkeistÃ¤ on kyseisen tiedoston oikeudet kertova merkkijono. TÃ¤ssÃ¤ sen ensimmÃ¤inen merkki on joko `d` tai `-`, joka kertoo onko kyseessÃ¤ tiedosto (`-`) vai kansio, eli **d**irectory.

Seuraavat yhdeksÃ¤n merkkiÃ¤ on varattu tiedoston tai kansion oikeuksille. NÃ¤mÃ¤ oikeudet merkitÃ¤Ã¤n aina jÃ¤rjestyksessÃ¤ lukuoikeus (r), kirjoitusoikeus (w) ja suoritusoikeus (x). EnsimmÃ¤iset kolme merkkiÃ¤ kertovat sen omistajan oikeudet. Jos vastaavan kirjaimen tilalla on viiva, tarkoittaa merkintÃ¤, ettÃ¤ oikeus puuttuu, eli sitÃ¤ ei ole annettu.

Seuraavat kolme merkkiÃ¤ kertovat samaan tapaan _ryhmÃ¤n_ oikeudet. RyhmÃ¤ on tapa, jolla samanlaisia kÃ¤yttÃ¤jiÃ¤ voi hallita - esimerkiksi kaikki opiskelijat saattaisivat olla osaston jÃ¤rjestelmissÃ¤ yhdessÃ¤ ryhmÃ¤ssÃ¤, jotta ryhmÃ¤lle voidaan antaa tiettyjÃ¤ oikeuksia.

Viimeiset kolme merkkiÃ¤ taas nÃ¤yttÃ¤vÃ¤t kaikkien muiden kÃ¤yttÃ¤jien oikeudet. TÃ¤hÃ¤n sarakkeeseen kuuluvat kaikki kÃ¤yttÃ¤jÃ¤t, jotka eivÃ¤t ole tiedoston omistajia, tai kuulu sen ryhmÃ¤Ã¤n.

Oikeuksien jÃ¤lkeen nÃ¤kyy tiedostoon johtavien linkkien mÃ¤Ã¤rÃ¤. Kansioissa linkkien lukumÃ¤Ã¤rÃ¤Ã¤n sisÃ¤ltyy myÃ¶s sen sisÃ¤ltÃ¤mÃ¤t tiedostot. Linkkien avulla voidaan viitata tiettyihin tiedostoihin.

Sen jÃ¤lkeen on tiedoston omistajan nimi ja ryhmÃ¤n nimi. TÃ¤ssÃ¤ tapauksessa ryhmÃ¤n nimi on kÃ¤yttÃ¤jÃ¤nimi `user`. ViimeisenÃ¤ tulostuksessa nÃ¤kyy kansion tai tiedoston koko [tavuina](<https://fi.wikipedia.org/wiki/Tavu_(tietotekniikka)>), sekÃ¤ viimeinen muokkauspÃ¤ivÃ¤, ja lopuksi sen nimi.

YllÃ¤ nÃ¤kyvÃ¤ssÃ¤ esimerkissÃ¤ siis `muistio.txt`-tiedostolle on omistajalla luku, kirjoitus ja ajo-oikeus, ryhmÃ¤llÃ¤ ja muilla taas on lukuoikeus. Kansiolla `pÃ¤ivÃ¤kirjamerkinnÃ¤t` taas on vain sen omistajalle luku, muokkaus ja ajo-oikeudet, eikÃ¤ ryhmÃ¤llÃ¤ tai muilla kÃ¤yttÃ¤jillÃ¤ ole nÃ¤itÃ¤ oikeuksia. Tiedostoa `artikkeli.txt` voivat kaikki lukea, mutteivÃ¤t muokata tai ajaa.

![Kuva komennon ls -l tulostuksen osista](/assets/permission-selitys.png){:class="img-responsive"}

Oikeuksia voi muuttaa tiedoston tai kansion omistaja, tai jÃ¤rjestelmÃ¤n yllÃ¤pitÃ¤jÃ¤. Niiden muokkaamiseen komentoriviltÃ¤ tarkoitettu komento on `chmod` (_change mode_). Se ottaa argumenttina merkkijonon, joka kertoo lisÃ¤tÃ¤Ã¤nkÃ¶ vai poistetaanko oikeuksia, kenelle oikeuksia annetaan, sekÃ¤ tiedoston tai kansion jolle komento tulee suorittaa.

Annettu oikeus ja sen saaja voidaan mÃ¤Ã¤ritellÃ¤ kirjainten avulla:

- r = lukuoikeus
- w = kirjoitusoikeus
- x = ajo-oikeus
- u = tiedoston omistaja
- g = ryhmÃ¤Ã¤n kuuluvat
- o = kaikki muut kÃ¤yttÃ¤jÃ¤t

Jos oikeuden saajaa ei mÃ¤Ã¤ritellÃ¤, chmod antaa kyseisen oikeuden kaikille kÃ¤yttÃ¤jÃ¤ryhmille (kÃ¤yttÃ¤jÃ¤lle, ryhmÃ¤lle ja muille).

`-` argumentti poistaa oikeuden, ja `+` antaa oikeuksia.

EsimerkkejÃ¤ `chmod`in kÃ¤ytÃ¶stÃ¤:

`chmod u+x esimerkki.txt` antaa tiedoston omistajalle oikeuden ajaa tiedosto.

`chmod o-w esimerkki.txt` poistaa muilta kÃ¤yttÃ¤jiltÃ¤ oikeuden kirjoittaa tiedostoon.

`chmod go+r esimerkki.txt` antaa ryhmÃ¤lle ja muille kÃ¤yttÃ¤jille oikeuden lukea tiedoston.

```
user@hal9000:~/esimerkki$ chmod -r esimerkki.txt
user@hal9000:~/esimerkki$ cat esimerkki.txt
cat: esimerkki.txt: Permission denied
user@hal9000:~/esimerkki$ chmod +r esimerkki.txt
user@hal9000:~/esimerkki$ cat esimerkki.txt
paras
esimerkki
user@hal9000:~/esimerkki$ chmod o+w esimerkki.txt
user@hal9000:~/esimerkki$ ls -l
total 8
-rw-r--rw- 1 user user 16 touko 31 21:41 esimerkki.txt
-rw-r--r-- 1 user user 0 kesÃ¤ 14 17:25 muistio2.txt
-rw-r--r-- 1 user user 0 touko 3 23:13 muistio.txt
drw-r--r-- 1 user user 130 kesÃ¤ 14 17:54 pÃ¤ivÃ¤kirjamerkinnÃ¤t
```

<div class="exercise">
<h3>Exercise 14: Oikeuksien harjoittelua {% include points.html text="10%" %}</h3>

Luo tiedosto <code>oikeus.txt</code> ja harjoittele sen avulla oikeuksien hallinnointia. Anna sille vuorotellen seuraavanlaiset oikeudet:

<pre>
<code>
-rwxr--r--
-rw-r--r--
-rw-------
-r-xrw--w-
</code>
</pre>

<div class="note">
MikÃ¤li teet Exercisen osaston koneella, tee se kansiossa, jonka polku on <code>/cs/home/yliopiston_tunnuksesi</code>. MikÃ¤li kansiota ei lÃ¶ydy (yrittÃ¤essÃ¤si siirtyÃ¤ kansioon komennolla <code>cd</code> tulostuu <code>No such file or directory</code>), aktivoi ensin CS-kÃ¤yttÃ¤jÃ¤tunnuksesi <a href="https://www.cs.helsinki.fi/tietotekniikka/k-ytt-luvat"> tÃ¤Ã¤ltÃ¤ </a> lÃ¶ytyvien ohjeiden mukaan.
</div>
</div>

Voit lukea lisÃ¤Ã¤ oikeuksista esimerkiksi [tÃ¤Ã¤ltÃ¤](https://csguide.cs.princeton.edu/account/groups).

<div class="warning">
Ole varovainen oikeuksien kanssa! Liiallisten oikeuksien antaminen esimerkiksi kotihakemistoosi on turvallisuusuhka. Useimmiten tarvitset ajo- ja lukuoikeuksia vain itse.
</div>

<h2>Skriptit</h2>

Skriptit (englanniksi _scripts_) ovat tiedostoja, jotka sisÃ¤ltÃ¤vÃ¤t komentorivillÃ¤ ajettavaa koodia. NiitÃ¤ kÃ¤ytetÃ¤Ã¤n paljon erilaisten computerella suoritettavien tehtÃ¤vien automatisoinnissa. Skriptin voi ajaa kirjoittamalla terminaaliin sen polun. Jos ollaan skriptin kanssa samassa kansiossa, voidaan se ajaa komennolla `./skriptin_nimi`.

Skriptien kirjoittamiseen on olemassa niille tarkoitettuja ohjelmointikieliÃ¤. Yksi niistÃ¤ on [Bash](<https://en.wikipedia.org/wiki/Bash_(Unix_shell)>). Se on Unix-kÃ¤yttÃ¶jÃ¤rjestelmien komentorivien oletustulkki, eli esimerkiksi Linuxin versioissa ja macOSissa voidaan oletuksena ajaa Bashilla kirjoitettuja skriptejÃ¤. Bash-skriptin aluksi tulee kirjoittaa seuraavanlainen taikarivi: `#!/bin/bash`. Skriptitiedostojen nimet myÃ¶s yleensÃ¤ lopetetaan pÃ¤Ã¤tteellÃ¤ `.sh`.

Skripteihin voi kirjoittaa myÃ¶s komentorivin ohjelmakomentoja. Esimerkiksi kansion sisÃ¤llÃ¶n nÃ¤yttÃ¤vÃ¤ skripti kirjoitetaan seuraavasti:

Avataan tekstitiedosto nimeltÃ¤ `script.sh`, ja kirjoitetaan sisÃ¤Ã¤n:

```
ls
```

Tallennetaan sen jÃ¤lkeen tiedosto. Kun skripti ajetaan, se tekee juuri, mitÃ¤ sen sisÃ¤ltÃ¤mÃ¤ komento kÃ¤skee:

```
hal9000:~ user$ ./script.sh
Applications	Library		      Pictures	      kissakuvia
Desktop		    Linus_Torvalds	Public          script.sh
Documents	    Movies	        Downloads	Music
```

Huomaa kuitenkin, ettÃ¤ jotkin asiat toimivat skripteissÃ¤ eri tavalla kuin olettaisi. Esimerkiksi `cd`-komento ei toimi sellaisenaan.

Jotta skriptin voi ajaa, kÃ¤yttÃ¤jÃ¤lle tulee ensin antaa siihen ajo-oikeudet komennolla `chmod`.

<div class="exercise">
<h3>Exercise 15: Pieni bash-skripti {% include points.html text="5%" %}</h3>

<ol>
<li>Etsi netistÃ¤, miten bash-kielessÃ¤ voi tulostaa tekstiÃ¤ terminaaliin. </li>
<li>Kirjoita pieni skripti, joka tulostaa "Hello world!". </li>
<li> Aja kirjoittamasi skripti.</li>
<li>SelvitÃ¤ sen jÃ¤lkeen, miksi yleensÃ¤ ensimmÃ¤isessÃ¤ ohjelmointiExercisessÃ¤ tulostetaan teksti "Hello world!".</li >
</ol>

</div>


<h2> Sudo</h2>

Tietoturvallisiin tapoihin kuuluu, ettÃ¤ computeressa erotellaan pÃ¤Ã¤kÃ¤yttÃ¤jÃ¤ (_superuser_) sekÃ¤ tavalliset kÃ¤yttÃ¤jÃ¤t. PÃ¤Ã¤kÃ¤yttÃ¤jÃ¤llÃ¤ on kaikki oikeudet jÃ¤rjestelmÃ¤Ã¤n, ja kaikki pÃ¤Ã¤kÃ¤yttÃ¤jÃ¤n ajamat ohjelmat ajetaan etuoikeutetussa tilassa. TÃ¤mÃ¤ voi olla vaarallista, jos pahantahtoista koodia pÃ¤Ã¤tyy ajoon, siksi computertta tulee kÃ¤yttÃ¤Ã¤ yleensÃ¤ normaalina kÃ¤yttÃ¤jÃ¤nÃ¤. NormaalikÃ¤yttÃ¤jÃ¤ voi kuitenkin ajaa komentoja pÃ¤Ã¤kÃ¤yttÃ¤jÃ¤nÃ¤n oikeuksin, jos kÃ¤yttÃ¤jÃ¤ kuuluu (_sudoers_) ryhmÃ¤Ã¤n. TÃ¤mÃ¤ tapahtuu lisÃ¤Ã¤mÃ¤llÃ¤ komennon alkuun `sudo` (alunperin _superuser do_). TÃ¤llÃ¶in ennen komennon ajamista kÃ¤yttÃ¤jÃ¤ltÃ¤ pyydetÃ¤Ã¤n kÃ¤yttÃ¤jÃ¤n oma salasana. Riippuen jÃ¤rjestelmÃ¤stÃ¤, `sudo`-oikeuksia voidaan tarvita esimerkiksi ohjelmien asentamiseen. Komennon kÃ¤yttÃ¶Ã¤ tulee kuitenkin vÃ¤lttÃ¤Ã¤, jos mahdollista.

Yliopiston tai osaston koneilla, eli niillÃ¤ joihin kirjaudut yliopiston tai osaston tunnuksilla esimerkiksi SSH-yhteyden kautta tai pajaluokissa, **ei saa ajaa mitÃ¤Ã¤n sudo-komentoja** - siitÃ¤ lÃ¤htee yllÃ¤pidolle vÃ¤Ã¤rinkÃ¤yttÃ¶ilmoitus.

<div class="warning">Ã„lÃ¤ esimerkiksi kopioi netistÃ¤ komentoa, joka alkaa sanalla sudo, jos et ymmÃ¤rrÃ¤ mitÃ¤ se tekee. Annat tÃ¤llÃ¶in ajettaville ohjelmille tÃ¤ydet valtuudet jÃ¤rjestelmÃ¤ssÃ¤si.</div>

<h2> Asentamisesta</h2>

Helpoiten komentorivityÃ¶kalujen asentaminen tapahtuu pakettienhallintajÃ¤rjestelmien avulla. TÃ¤llaisia ovat esimerkiksi apt, apt-get (Linux) tai homebrew (macOS).

Ubuntussa ja Cubblissa (osaston koneilla kÃ¤ytettÃ¤vÃ¤ Linuxin versio) pitÃ¤isi olla apt ja apt-get valmiina, macOSissa joudut asentamaan homebrew:n erikseen [tÃ¤Ã¤ltÃ¤](https://brew.sh/). Ohjeita aptin kÃ¤yttÃ¶Ã¶n lÃ¶ytyy [tÃ¤Ã¤ltÃ¤](https://help.ubuntu.com/community/AptGet/Howto) tai suomeksi [tÃ¤Ã¤ltÃ¤](https://www.linux.fi/wiki/APT). **Suosittelemme vahvasti pakettienhallintajÃ¤rjestelmÃ¤n kÃ¤yttÃ¤mistÃ¤.**

Yksinkertaisimmillaan paketinhallintajÃ¤rjestelmÃ¤n avulla asennetaan paketti ajamalla komento `install`, ja antamalla sille parametriksi asennettavan paketin nimen.

Esimerkiksi tekstieditori `nano` asennettaisiin homebrew:n avulla ajamalla seuraava komento:

```
brew install nano
```

ja apt:in avulla ajamalla

```
apt install nano
```

Kun ohjelma on asennettu pakettienhallintajÃ¤rjestelmÃ¤n avulla, voidaan sitÃ¤ yleensÃ¤ kutsua komennolla suoraan komentoriviltÃ¤. Itse komennon nimi kannattaa tarkistaa kÃ¤yttÃ¶ohjeista.

PaketinhallintajÃ¤rjestelmÃ¤n avulla voidaan myÃ¶s pÃ¤ivittÃ¤Ã¤ ja poistaa paketteja. EnsimmÃ¤inen tapahtuu homebrew:ssa, aptissa ja apt-getissÃ¤ kommenolla `upgrade` ja jÃ¤lkimmÃ¤inen komennolla `remove`.

JÃ¤rjestelmÃ¤stÃ¤ riippuen ohjelmien asentaminen voi vaatia pÃ¤Ã¤kÃ¤yttÃ¤jÃ¤n oikeudet, jolloin komennon eteen on lisÃ¤ttÃ¤vÃ¤ `sudo`.

Ohjelman asentaminen ilman pakettienhallintajÃ¤rjestelmÃ¤Ã¤ sisÃ¤ltÃ¤Ã¤ usein `PATH`-nimisen _ympÃ¤ristÃ¶muuttujan_ muokkaamista. YmpÃ¤ristÃ¶muuttujien avulla voidaan mÃ¤Ã¤ritellÃ¤ jÃ¤rjestelmÃ¤kohteinen ympÃ¤ristÃ¶. KÃ¤ytÃ¤nnÃ¶ssÃ¤ tÃ¤mÃ¤ tarkoittaa arvojen mÃ¤Ã¤rittelemistÃ¤ koko jÃ¤rjestelmÃ¤n laajuisille muuttujille. [`PATH`-muuttujaan](<https://en.wikipedia.org/wiki/PATH_(variable)>) mÃ¤Ã¤ritellÃ¤Ã¤n, missÃ¤ computeressa sijaitsee suoritettavat ohjelmat, jolloin niihin voidaan viitata komennoilla tarkan sijainnin sijaan. Voit lukea ympÃ¤ristÃ¶muuttujista lisÃ¤Ã¤ esimerkiksi [tÃ¤Ã¤ltÃ¤](https://www.tutorialspoint.com/unix/unix-environment.htm).

JÃ¤rjestelmÃ¤n ympÃ¤ristÃ¶ voidaan lisÃ¤ksi mÃ¤Ã¤ritellÃ¤ skripteissÃ¤ niin, ettÃ¤ niitÃ¤ ei tarvitse erikseen mÃ¤Ã¤ritellÃ¤ session loputtua. TÃ¤llaisia on esimerkiksi `~/.bashrc`, joka ajetaan joka kerta, kun terminaali kÃ¤ynnistetÃ¤Ã¤n ja `~/bash_profile`, joka ajetaan jokaisella kirjautumisella. Voit lukea nÃ¤istÃ¤ tiedostoista ja niiden kÃ¤ytÃ¶stÃ¤ muun muassa [tÃ¤Ã¤ltÃ¤](http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html). Esimerkiksi `PATH`-ympÃ¤ristÃ¶muuttuja mÃ¤Ã¤ritellÃ¤Ã¤n yleensÃ¤ `.bashrc`-tiedostoon.

<h2> Loppusanat</h2>

TÃ¤hÃ¤n pÃ¤Ã¤ttyy kurssin ensimmÃ¤inen osa. Komentorivin opettelussa voi mennÃ¤ aikaa, mutta ajan kanssa uuteen tyÃ¶kaluun tottuu. Unix-yhteisÃ¶ tarjoaa paljon apuja internetissÃ¤: Linuxille on muun muassa wiki-sivut [linux.fi](https://www.linux.fi/wiki/Etusivu), sekÃ¤ Unixille foorumi [Stack Exchangessa](https://unix.stackexchange.com/). MacOSille on olemassa kÃ¤yttÃ¤jÃ¤ystÃ¤vÃ¤llinen virallinen dokumentaatio, sekÃ¤ myÃ¶s oma [foorumi](https://discussions.apple.com/welcome).

Komentorivin peruskÃ¤yttÃ¶ kannattaa opetella, vaikka se tuntuisi aluksi turhalta. Komentorivi on edelleen erottamaton osa koodaajan tyÃ¶tÃ¤. Monen mielestÃ¤ komentorivillÃ¤ toimiminen on koodatessa lopulta nopeampaa, ja yleensÃ¤ koodatessa kÃ¤ytettÃ¤ville ohjelmille on olemassa komentoriviohjelma. TÃ¤llÃ¶in graafisen selaimen avaaminen tiedoston kopioimiseksi voi oikeasti vain hidastaa. Joskus graafista vaihtoehtoa ei ole olemassa. Loppujen lopuksi kyse on tietenkin tottumisesta ja mielipiteistÃ¤.

PidÃ¤ nyt pieni tauko: voit taputtaa itseÃ¤si selkÃ¤Ã¤n, sait kÃ¤ytyÃ¤ ensimmÃ¤isen osan lÃ¤pi! Palaa sen jÃ¤lkeen tÃ¤mÃ¤n sivun alusta lÃ¶ytyviin oppimistavoitteisiin, ja selvitÃ¤ itsellesi, mitkÃ¤ aiheet tarvitsevat vielÃ¤ kertausta.

TÃ¤mÃ¤ osa toimi esittelynÃ¤ komentoriviin. Komentorivi tarjoaa kuitenkin vielÃ¤ paljon erilaisia tyÃ¶kaluja ja komentoja, joita ei tÃ¤ssÃ¤ kÃ¤yty lÃ¤pi. Tulet oppimaan ne tulevilla kursseilla sitÃ¤ mukaan kuin niitÃ¤ tarvitset. Alla vielÃ¤ listaus hyÃ¶dyllisistÃ¤ komennoista, joihin kannattaa ehkÃ¤ tutustua, vaikkei niitÃ¤ kÃ¤yty tÃ¤ssÃ¤ lÃ¤pi:

- `watch`: toista komentoa tietyin vÃ¤liajoin
- `&&` tai `;`: ketjuta komentoja perÃ¤jÃ¤lkeen
- `alias`: mÃ¤Ã¤rittele komennoille aliaksia, joiden avulla voit kutsua niitÃ¤ esimerkiksi nopeammin.
- `&`: kirjoittamalla merkin komennon loppuun sen aloittama prosessi jÃ¤Ã¤ taustalle, eikÃ¤ lukitse komentoriviÃ¤
- `history`: tarkastele komentohistoriaa
- `Ctrl + r`: etsi komentoja omasta historiasta hakusanoilla
