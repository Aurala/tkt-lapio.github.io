---
layout: material
title: 'Part 3 - Static websites'
date: 1969-12-28 00:02:00 +0200
permalink: /websites/
tag: material
---

## Learning goals

<h4>The goal is that after this week, the student will</h4>

<ul>
<li>Understand what a static website means.</li>
<li>Understand what HTML is and what it's used for.</li>
<li>Know what an HTML element is and what it consists of.</li>
<li>Know what an HTML document consists of. </li>
<li>Know how to correctly indent HTML and understands the syntax.</li>
<li>Know how to place elements on a web site.</li>
<li>Know how to make a simple web page more readable </li>
<li>Know what CSS is and what it is used for.</li>
<li>Know how to use the most common features of CSS</li>
<li>Know how to publish static web pages written with vanilla HTML and CSS</li>
</ul>

## Static websites: HTML ja CSS

The previous parts of the course covered using the command line to do various tasks, and version control for storing code. In this part you will use those skills to create simple static websites. We will start by discussing what static websites actually are, and what they consist of.

To put it simply, a website is a document published on the Internet. The documents are located in servers which are computers allowing users to view them via a browser, such as Google Chrome or Firefox. Websites are typically divided into two categories: static and dynamic websites. The content of static websites doesn't change, unless it is explicitly changed on the server. This means that every user always sees the same content. Static websites can be created using a markup language called HTML. On the contrary, dynamic pages are created at the same time as the browser accesses a site. This course will only handle static websites. You may learn more about dynamic websites later on in your studies.

## Setting up

You will need a proper text editor in this part of the course. We recommend using Visual Studio Code, or [VSCode](https://code.visualstudio.com/download). In addition, you will need a web browser. Modern, recommended ones include [Google Chrome](https://www.google.fi/chrome/index.html) ja [Firefox](https://www.mozilla.org/fi/firefox/). It is possible to do the exercises using another text editor and browser, however these are the ones we recommend.

<div class="exercise">
<h3>Exercise 1: Setting up {% include points.html text="5%" %}</h3>
<ol>
<li>Create a Git project called "lapio-website" using the command line.</li>
<li>Create a new reposiotry to GitHub with the same name</li>
<li>Add the newly created repository as a remote of the local project.</li>
<li>Add a file called <code>index.html</code> to the project, and copy its contents from <a href="https://github.com/rovaniemi/lapio-tehtavamateriaalia/blob/master/vk3-ex1/index.html">here</a> You don't need to understand the contents yet.</li>
<li>Create a new commit with the messafe <code>Osa 3. First exercise</code> and push it to GitHub.</li>
</ol>
</div>

## HTML

HTML is often referred to as a programming language, which is technically not true. It is a markup language, describing the structure of a document. HTML comprises a set of _elements_ and _tags_ used to define and show different sections of the document, also giving them specific functionalities. Tags can for example turn a word into a link, cursive, or a different size.

Here is an example of an HTML element:

```html
<p>This is a piece of text.</p>
```

Let's look at the structure of the element. An HTML element is composed of three parts:

1.  The start tag `<p>`
2.  The content itself `This is a piece of text`
3.  The end tag `</p>`

HTML tags are keywords hidden inside the site, not shown in the browser. Nevertheless, they define how the browser styles and shows the contents of the document you are viewing. There are countless different HTML tags and elements created with them, each serving a specific purpose. We'll start with the elements used to edit text.

1.  `<h1></h1>`: This tag is used to create heading elements. There are six different heading tags, ranging from `h1` to `h6`. The primary heading is created using the first tag h1. The least important heading is created with h6.
2.  `<p></p>`: The element created with the tag `p` contains the body text of the document.
3.  `<em></em>`: The element with the tag `em` is shown in cursive.
4.  `<strong></strong>`: The element with the tag `strong` is bolded. You can also create elements with `<b>` and `<i>` to show text in bold and cursive respectively.

Now let's see how HTML works in practice. We'll open the file <code>index.html</code> created in the first exercise in a browser and a text editor. You can open the file in the browser by clicking on it in the graphical user interface, or explicitly opening it using a browser program from the command line.

<div class="note">
If you can't open the file in a browser, you can also write its path to the URL field.
</div>

Let's add the following line in the <code>index.html</code> file just under `<!--Do the exercises here-->`: `<p>This is a piece of text</p>`. Then we'll see what the document looks like in the browser.


![An example of viewing an HTML document in the browser](/assets/html-example-01.png)

<div class="note">
Note that when creating an HTML file, you should end the filename with <code>.html</code>, to let the file system know what kind of code the file holds.
</div>


<div class="exercise">
<h3>Exercise 2: Getting to know text elements {% include points.html text="5%" %}</h3>

Let's continue editing the file <code>index.html</code>. Test out each of the different text elements and see what they look like. The goal of the exercise is to have the website look like the following:

<img src="/assets/html-ex1.png" alt="Second exercise goal"/>

After you are done in your opinion, create a new commit with the following message: <code>Part 3, add second exercise </code>. Finish by pushing the commit to GitHub.
</div>

# Nested elements

HTML allows _nesting_ elements, i.e. creating element inside each other. It may help to picture each element as a box which takes care of its own contents. The content could be either text or images. In addition, sometimes one needs to put other boxes inside one. This is equivalent to nested elements.

For example, in order to only bold a specific word inside a sentence, one needs to use nested elements:

This is a **sentence**

```html
<p>This is a <strong>sentence</strong></p>
```

However, when using nested elements, it is important to close the tags in the right order. In the previous example we opened the element `<p>` first, and the tag `<strong>` second. This means that we had to close the element `<strong>` first, i.e. the tag we opened the last, and only then close the tag `<p>`, which we opened first. Always close the last tag you opened first. Otherwiser the browser will try and guess the correct structure of the document. The site will be rendered even if the elements are closed in the wrong order, but the content will most likely be structured in a bizarre way, depending on the browser.

HTML elements are divided into two distinct categories: _block-level_ elements and _inline_ elements.

Block level elements are displayed as blocks on the weviste. Each block-level element takes up a whole line of space, and so the contents are always displayed on a new line. A block element should not be put inside an inline element. An inline element is always inside a block element.

Inline elements should always be closed inside a block element, while only handling a small part of the document. They shouldn't contain whole pieces of text or picture. However, one line can contain several inline level elements. They are usually located inside text. Examples of inline elements are the tags `<strong></strong` and `<a></a>`.

Next we'll look at block and inline element through an example.


```
<p>This is an example of using <strong>inline </strong> </p>
```

The previous inline element will look like this in the browser:


![Inline element](/assets/html-example-4.png)

```
<p>Here is an example of a <p> block</p> element</p>
```

The previous block element will look like this in the browser:

![Block element](/assets/html-example-3.png)

Nesting elements is an essential part of HTML. Its role will be highlighted even more later on, once we learn how to create styles with CSS.

<div class="exercise">
<h3>Exercise 3: Nested elements {% include points.html text="10%" %}</h3>
Continue editing the file, introduced in the previous exercises <code>index.html</code>.
Your task is to make the document inside the file look like the following picture. In other words, bold the text <code>Jukola</code>, italicize the text <code>HÃ¤me</code>, and both bold and italicize the text <code>Toukola</code>.

<img src="/assets/html-ex3.png" alt="Third exercise as a picture"/>

After you are done in your opinion, create a new commit with the following message: <code>Part 3, add third exercise </code>. Finish by pushing the commit to GitHub.
</div>

# The structure of an HTML document

Now you know the basics of HTML. However, they are not very useful on their own. Next we'll dive further into what makes an HTML document.

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>My test page</title>
  </head>
  <body>
    <p>This is my test site</p>
  </body>
</html>
```

Next we'll break down the contents of the previous document element by element.

1.  `<!DOCTYPE html>`: This tag specifies which type of HTML the document is written in, i.e. the rules which the document follows. This way the browser can interpret the HTML properly. The type of HTML used in this course is HTML5. In this case, the first row of an HTML document should always be `<!DOCTYPE html>`.
2.  `<html></html>`: This tag builds the block element containing all the code of the site. It is sometimes referred to as the root element. It is always the first element of an HTML document.
3.  `<head></head>`: This block element contains metadata, or infromation about the website not shown to the user in the browser. The element may contain for example key words, improving the site's visibility for search engines, links to CSS files or charsets which the site uses. 
4.  `<meta charset="utf-8">`: This element defines which character set the HTML document uses. UTF-8 is recommended as it can also handle nordic letters.
5.  `<title></title>`: This elements defines the title of the website. You can usually see the title in the browser as the name of the tab of the website. In addition, sites are bookmarked using their title.
6.  `<body></body>`: This block element comprises all the content of the actual webpage, such as text, pictures, and all the elements we have discussed up to this moment.

# Indenting

An HTML document must be indentend properly in order to make sure the code is readable and clear. Here are the rules you should use when indenting HTML code:

1. Don't add a new line without a good reason. For example, if `<h1></h1>` is the primary heading and there's an element built with `<p></p>` underneath, you don't need to add an empty line between them.
2. Alwats indent block elements with two spaces with respect to the previous block.
3. Don't indent inline elements.

**Here is an example of a poorly indented HTML document:**

```html
<h1>Heading</h1>

<p>Lorem ipsum
<em>dolor sit amet</em>
consectetur adipisicing elit,sed do
<strong>eiusmod tempor</strong>
</p>
```

**Here is the same code indented properly:**

```html
<h1>Heading</h1>
<p>
  Lorem ipsum<em>dolor sit amet</em>consectetur
  adipisicing elit,sed do<strong>eiusmod tempor</strong>
</p>
```

Google has created a great HTML style guide, which you can find [here](https://google.github.io/styleguide/htmlcssguide.html).

In addition, many text editors provide extensions which indent HTML code automatically. For example, in VSCode the extension [beautify](https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify) properly indents the code on each save.

# Lists

Next we'll get to know lists. Lists are everywhere, also on the Internet. HTML supports three different kinds of lists: unordered, ordered and nested lists (lists within lists).

An unordered list refers to a list where the order is not significant (hence the name). One example of an unordered list would be a shopping list. In practice, these kinds of lists are shown stacked, separated with bullets. You can create an unordered list with the tags `<ul></ul>` and `<li></li>`. Each unordered list starts and ends with the tags `<ul></ul>`. Each item on the list is inside, in an element created with `<li></li>`.


```html
<ul>
  <li>milk</li>
  <li>break</li>
  <li>candy</li>
  <li>chips</li>
</ul>
```

<ul>
  <li>milk</li>
  <li>break</li>
  <li>candy</li>
  <li>chips</li>
</ul>


An ordered list is almost identical to the ordered list, with the exception that the order of the items matters. Thus the contents of the list are displayed using incremental numbers. For example, route directions would create an ordered list. The list is created with the tags `<ol></ol>`.


```html
<ol>
  <li>Drive to the end of the road.</li>
  <li>Turn to the right.</li>
  <li>Park the car.</li>
</ol>
```
<ol>
  <li>Drive to the end of the road.</li>
  <li>Turn to the right.</li>
  <li>Park the car.</li>
</ol>

Nested lists can combine both ordered and unordered lists. For example, here are some instructions for taking care of a dog:

```html
<ol>
  <li>Take the dog out for a walk.</li>
  <li>Give the dog some food containing:</li>
  <ul>
    <li>150g of cereal</li>
    <li>a splash of oil</li>
    <li>a spoonful of joint powder</li>
    <li>a spoonful of tooth powder</li>
  </ul>
  <li>Fill the water cup.</li>
</ol>
```

<ol>
  <li>Take the dog out for a walk.</li>
  <li>Give the dog some food containing:</li>
  <ul>
    <li>150g of cereal</li>
    <li>a splash of oil</li>
    <li>a spoonful of joint powder</li>
    <li>a spoonful of tooth powder.</li>
  </ul>
  <li>Fill the water cup.</li>
</ol>

<div class="exercise">
<h3>Exercise 4: Lists {% include points.html text="10%" %}</h3>

We'll continue editing the document inside <code>index.html</code>. First, test out the different list types in the document. Then try and make the site look like the following picture:

<img src="/assets/html-ex4.png" alt="Picture for the fourth exercise" />

When you are done in your opinion, create a commit with the message <code>Part 3, add exercise 4</code> and push it to GitHub.

</div>

# Images and comments

Images are an essential part of a website. As the old saying goes, a picture is worth a thousand words. In order to display an image, it has to be located on some server. One can use the same server where the HTML document is served from, or the image can be linked from elsewhere on the Internet. We'll start with the latter option.

Images are added to a web page with an element built with the `<img/>` tag. For example, if we wished to display the image from this address: `https://cdn.pixabay.com/photo/2016/02/19/15/46/dog-1210559_1280.jpg`, we would use the following element:

```html
<img src="https://cdn.pixabay.com/photo/2016/02/19/15/46/dog-1210559_1280.jpg" alt="Smiling dog" height="240" width="320"/>
```

There are some new things inside the element, such as `alt` and `height`. These are called _attributes_. Each HTML element can contain attributes. Attributes are used based on the following rule: `name="value"`. That is, in order to define an attribute, you have to write its name inside an element, and give its value as a string. 

Attributes provide additional information to an element. In the above example with the image, the `src` attribute defines the location of the linked image. The attribute `alt` defines what the image shows (written in a natural language such as English), and `height` and `width` determine the size of the image. Out of these four, the `src` and `alt` attributes are the most important. Without `src`, no image would be displayed, and without `alt` people viewing the page in alternative ways couldn't know what the image shows. For example, blind people use the Internet with the help of a screen reader, which can then use the contents of the `alt` tag to describe the picture.

Note how the `<img/>` element does not have an end tag. It is a so called empty element. This means, that the end tag is integrated in the start tag. Empty elements are usually inline elements. You can read more about them [here](https://developer.mozilla.org/en-US/docs/Glossary/Empty_element).

If the image is located at the same computer as the website, a relative path can be used for the <code>src</code> attribute. 

An HTML document can also contain comments, which will not be displayed to the user in the browser. The point of comments is to clarify the thoughts of the person who has written the code, so that it is easier to interpret by others (and perhaps the developer themselves later on). A comment can be added by writing it between `<!--` and `-->`. For example, `<!-- this is a comment -->`

<div class="exercise">
<h3>Exercise 5: Images and comments {% include points.html text="10%" %}</h3>
<div class="warning">
If you attach an image to your site from another web page, make sure you actually have the right to use that image. There are several services online offering roalty-free images.
</div>
<ol>
<li>Download <a href="https://upload.wikimedia.org/wikipedia/commons/a/a2/Seitsem%C3%A4n_veljest%C3%A4.png">this image</a> to your computer.</li>
<li>Create a new folder to your project, called <code>assets</code> and add it to Git.</li>
<li>Add the picture to the newly created folder and to Git.</li>
<li>Add the image to your web site using a relative path, and add it to Git.</li>
<li>Adjust the image size as you wish.</li>
<li>Remember to add the <code>alt</code> attribute.</li>
<li>Write a comment above the image, describing the contents.</li>
<li>Here is what the final product should look like:</li>
<img src="/assets/html-ex5.png" alt="The result of fifth exercise"/>
<li>When you are done in your opinion, create a commit with the message <code>Part 3, fifth exercise</code> and push it to GitHub.</li>
</ol>
</div>

# Links

HTML documents can include hyperlinks to other HTML documents. A link can redirect to the same server where the original document is located, or to another server somewhere in the Internet. Links are created with `<a></a>` elements. They are used the following way:
```html
<a href="https://yle.fi/uutiset/osasto/news/">Yle news</a>
```

The link element has an `href` attriibute, which defines the address of the linked resource. If the linked resource is located on another server, the server address should be written in its entirety. However, if the linked document is located on the same server, one can use a relative path, by for example writing `href="page2.html"`.

The `a` tag has several other attributes as well. For example the attribute `target="_blank"` would force the browser to open the resource in a new tab. You can learn more about the different attributes [here](https://www.w3schools.com/tags/tag_a.asp).

<div class="exercise">
<h3>Exercise 6: Linking HTML files {% include points.html text="10%" %}</h3>
<ol>
<li>Create a new HTML document in the same folder as the first one called "index.html".</li>
<li>Add the new file to Git.</li>
<li>Create a basic HTML structure to the document. You can reuse the one from the first exercise.</li>
<li>Link the new document to the <code>index.html</code> document and vice versa.</li>
<li>Here is an example of what the end result could look like:</li>
<img src="/assets/html-ex6.png" alt="The result of sixth exercise"/>
<li>When you are done in your opinion, create a new commit with the message <code>Part 3, add sixth exercise</code> and push it to GitHub.</li>
</ol>
</div>

## CSS

CSS, or Cascading Style Sheets, is a technique for styling an HTML document. CSS defines how the HTML elements are drawn on the screen. Like HTML, CSS is not a programming language. However, it is not a markup language either. It is in fact a style sheet language instead, which is used to associate styles to HTML tags. For example, with CSS one can paint all the `<p></p>` elements of a document green with the following block of code:

```css
p {
  color: green;
}
```

CSS consists primarly of two sections: _selectors_ and _properties_. Selectors define the elements the styles should be applied to, and the properties are the styles themselves. In the example above, the lone letter `p` is the selector. A selector is always followed by a block, outlined with `{}`, where the desired styles are defined. In the example, `color: green` is a CSS property. Properties are usually defined using key-value pairs.

# Linking CSS

In order to use CSS to influence the styles of an HTML document, it has to be linked to the HTML document. The link to the CSS file should be given in the `<head></head>` tag, where the document's metadata is located:

```html
<head>
  <link rel="stylesheet" href="style.css">
</head>
```

Note that there is a new attribute in the link above. The attribute `rel` tells the browser that the link is to a stylesheet. Thus the browser knows that it needs to read that file and use its contents when rendering the page.

<div class="exercise">
<h3>Exercise 7: Linking CSS {% include points.html text="5%" %}</h3>
<ol>
<li>Create a new CSS file called <code>style.css</code> to the same location with the previous files.</li>
<li>Add the new file to Git.</li>
<li>Add the following style to the CSS file: <code>p { background-color: red; }</code></li>
<li>Link the CSS file to the initial HTML document, <code>index.html</code>, so that the result is the following:</li>
<img src="/assets/html-ex7.png" alt="Result of seventh exercise"/>

When you are done in your opinion, create a commit with the message <code>Part 3, add seventh exercise</code> and push it to GitHub.
</ol>
</div>

# Alternative ways of adding CSS styles

There are also other ways of adding styles besides linking a whole CSS file with a link element in the head of an HTML document.

**Inline CSS**

Inlince CSS is a good way of defining the styles of individual elements. In practice, the styles are added directly to the `style` attribute of the desired elements. However, the method isn't very scalable, and shouldn't be used to any even slightly complicated sites.

```html
<h1 style="color:yellow;">This is a yellow heading</h1>
```

**Internal CSS**

This method is very close to linking a CSS file. Internal CSS means adding the styles inside a `style` element in the head of th HTML document, i.e. the same place where one would add the link to the separate CSS file.

```html
  <head>
    <style>
      body {background-color: black;}
      h1   {color: blue;}
    </style>
  </head>
```

As you probably guessed, using a separate CSS file is often the best option when dealing with several HTML documents, as the one file can be linked to each of them, and thus updating the site's styles only requires editing one file.

# Selectors

Selectors define which elements of the HTML document a specific style should be applied to. One element can match several selectors, which all can have a different effect on the element. On the other hand, one selector can match several elements.

Here is a basic CSS example:

```css
p {
  background-color: red;
}
```

In the example, `p` is the selector, and `background-color: red;` us the CSS property. The selector is always written at the beginning of a line, and it is followed by a block containing the properties, which will be used to change the appearances of the elements matched by the selector. 

Here are the four most common types of selectors:

**Type selectors**

A type selector matches all the elements of a specific type, based on their tags. For example, the following snippet of code

```css
p {
  color: blue;
}
```

would color all the elements defined with `<p></p>` as blue. Other possible types could be `div`, `a`, `h1`, or any HTML tag.

**Class selectors**

In order to use a class selector, one must first make alterations to the elements one wishes to style. The elements should be added a _class_, which is an atrribute defined by the user. These elements can then be matched with the class selector, regardless of the type of the element tag. The name of the class selector can be defined freely, but it should naturally be something descriptive.

Here is an example, where we will color all the lines containing the word "yellow" with the color yellow.

```html
<p>
  <p>Look at the stars, look how they shine for you,</p>
  <p class="yellow">yeah they were all yellow.</p>
  <p>I came along, I wrote a song for you,</p>
  <p class="yellow">and it was called yellow.</p>
</p>
```

```css
.yellow {
  color: yellow;
}
```

One can also give one element several classes. They should then be separated with a space, as follows:

```html
  <p class="yellow chorus">yeah they were all yellow.</p>
```

Note how the class selector is preceeded by a dot `.` in the CSS. This specifies, that it's a class selector. Without the dot the selector would refer to a tag called "yellow".

The class selector is possibly the type of selector the most widely used. It overrides the changes made with type selectors, in case the styles of an element have been defined using both. In other words, if in the above example you had also defined a style for all `p` tags, the desired lines would still appear as yellow, as the class selector is given more value.

**ID selector**

The ID selector is quite similar to the class selector. The difference is that, contrary to a class selector, an ID selector is designed to be used for _only one_ element at a time. In other words, one ID should only match one element.

The use of an ID selector also requires adding new information to the HTML document edited. The attribute used for defining the name of the ID selector is "id". 

For example, if we wish to color just one part of the whole document red, we could add the desired element the attribute `id="red-part"`:


```html
<p class="body" id="red-part">This text will be red</p>
```

```css
.body {
  color: yellow;
}

#red-part {
  color: red;
}
```

Note how it is possible to match an element with a class and an ID selector at the same time. In CSS, the ID selector is defined by starting the selector name with `#`.

Some people say, that ID selectors are useless and not to be used. This is definitely an overstatement. However, the ID selector should be used more conservatively than the class selector. For example, the class selector is the right choice for styling several elements in the same way. The styles given with an ID selector override the styles given with a class selector, i.e. in case of conflicts, the element will be styled based on the ID selector.

**The universal selector**

The universal selector simply means choosing all the elements of an HTML document. It has the least weight, i.e. if an element is given some styles using any other selector, it will override the universal selector. The symbol of the universal selector should be familiar to you from the command line part, where it was used to match several filenames:

```
* {
  color: green;
}
```

<div class="exercise">
<h3>Exercise 8: Selectors {% include points.html text="10%" %}</h3>

The idea of this exercise is to test out each of the selectors in order to add colors to the <code>index.html</code> we have been working with.

<ol>
<li>Don't worry about making the site look pretty - we'll get to that later on - just try out all of the selectors describes above.</li>
Try and make the site look like the following:
   <img src="/assets/html-ex-8.png" alt="The result of the eight exercise"/>
<li>When you are done in your opinion, create a commit with the message <code>Part 3, add eigth exercise</code>, and push it to GitHub.</li>
</ol>
</div>

# Elementtien koko, marginaali, sisennys sekÃ¤ sijainti.

Emme ole vielÃ¤ tutustuneet kahteen HTML-kielen kÃ¤ytetyimpÃ¤Ã¤n elementtiin. Ne ovat `<div></div>`- ja `<span></span>`-elementit. Span-elementti on sisÃ¤tason elementti, ja `<div></div>` on lohkotason elementti. Molemmat ovat kÃ¤ytÃ¤nnÃ¶ssÃ¤ tyhjiÃ¤ kuoria, joiden sisÃ¤lle voi laittaa uusia elementtejÃ¤. Ideana on, ettÃ¤ elementeille annetaan CSS-ominaisuuksia, jolloin pystymme asettelemaan elementtien sisÃ¤llÃ¤ olevaa sisÃ¤ltÃ¶Ã¤ paremmin. Tutustutaan tarkemmin nÃ¤ihin CSS-ominaisuuksiin.

Elementeille voidaan antaa `height`- ja `width`-CSS-ominaisuudet, jotka kuvaavat elementin korkeutta ja leveyttÃ¤. Testataan tÃ¤tÃ¤ yksinkertaisen div-elementin avulla, jonka sisÃ¤llÃ¤ on p-elementti.

```html
<div class="container">
  <p>TekstipÃ¤tkÃ¤ div-elementin sisÃ¤llÃ¤</p>
</div>
```

```css
.container {
  width: 200px;
  height: 100px;
  background-color: red;
}
```

![Esimerkki korkeudesta ja leveydestÃ¤](/assets/html-example-12.png)

Huomaamme, ettÃ¤ tekstin taustalle on tullut suorakulmion muotoinen alue, jonka taustavÃ¤ri on punainen.

Elementille voi myÃ¶s mÃ¤Ã¤rittÃ¤Ã¤ CSS:n avulla `padding`- ja `margin`-ominaisuudet. KÃ¤ytÃ¤nnÃ¶ssÃ¤ ne lisÃ¤Ã¤vÃ¤t elementille marginaalia tai sisennystÃ¤ seuraavalla tavalla:

![Margin ja padding](/assets/margin-padding.png)

`Paddingille`, `marginille` ja monille muille CSS-ominaisuuksille voi antaa arvoja eri tavoin ja eri mittayksikÃ¶illÃ¤. KÃ¤ydÃ¤Ã¤n nÃ¤mÃ¤ tavat kÃ¤yttÃ¤en esimerkkinÃ¤ margin-ominaisuutta. Muiden ominaisuuksien kanssa `margin`-sana vain vaihtuu ko. ominaisuuden nimitykseksi.

```css
.container {
  margin: 10px; /* Antaa marginaalia 10px kaikille neljÃ¤lle arvolle (top, right, left, bottom) */
  margin: 10px 5px 15px; /* YlÃ¤marginaali on 10px, alamarginaali 15px, oikea- sekÃ¤ vasen marginaali 5px */
  margin: 10px 5px; /* YlÃ¤- ja alamarginaalit ovat 10px, oikea sekÃ¤ vasen 5px */
  margin: 10px 5px 15px 20px; /* YlÃ¤marginaali on 10px, oikea marginaali on 5px, alamarginaali 15px ja vasenta marginaalia 20px */
  margin-top: 10px; /* Antaa vain ylÃ¤marginaalia 10px */
  margin-right: 10px; /* Antaa vain oikeaa marginaalia 10px */
  margin-left: 10px; /* Antaa vain vasenta marginaalia 10px */
  margin-bottom: 10px; /* Antaa vain alamarginaalia 10px */
}
```

Marginaalille voi antaa myÃ¶s `auto`-mÃ¤Ã¤ritteen, jolloin marginaali mÃ¤Ã¤rittyy automaattisesti. Esimerkiksi `margin: 0 auto;`-ominaisuus keskittÃ¤Ã¤ sisemmÃ¤n elementin ulommaisen elementin keskelle sivusuunnassa. Voit lukea tÃ¤stÃ¤ lisÃ¤Ã¤ [tÃ¤Ã¤ltÃ¤](https://www.hongkiat.com/blog/css-margin-auto/).

PÃ¤rjÃ¤Ã¤mme pitkÃ¤lle pelkÃ¤stÃ¤Ã¤n `marginin` ja `paddingin` avulla, mutta mitÃ¤ jos haluamme siirtÃ¤Ã¤ elementtiÃ¤ verkkosivuilla? TÃ¤hÃ¤n tarvitsemme `position`- ja `right`-,`left`-, `top`- sekÃ¤ `bottom`-ominaisuuksia.

LisÃ¤tÃ¤Ã¤n edelliseen esimerkkikoodiin kaksi elementtiÃ¤:

```html
<div class="first-box-container">
  <p>EnsimmÃ¤inen elementti</p>
</div>
<div class="second-box-container">
  <p>Toinen elementti</p>
</div>
<div class="third-box-container">
  <p>Kolmas elementti</p>
</div>
```

```css
.first-box-container {
  width: 200px;
  height: 100px;
  background-color: red;
}

.second-box-container {
  width: 200px;
  height: 100px;
  background-color: yellow;
}

.third-box-container {
  width: 200px;
  height: 100px;
  background-color: green;
}
```

![Esimerkki HTML-sivu, kahden elementin kanssa](/assets/html-example-13.png)

Tutustutaan nyt CSS:n position-ominaisuuteen, jonka avulla on mahdollista siirtÃ¤Ã¤ elementtejÃ¤ verkkosivuilla.
Aloitetaan antamalla `.second-box-container`-selektorille CSS-ominaisuus `left: 250px;`. TÃ¤mÃ¤n pitÃ¤isi siirtÃ¤Ã¤ keskimmÃ¤istÃ¤ HMTL-elementtiÃ¤ 250px vasemmasta reunasta poispÃ¤in.

![Esimerkki HTML-sivu, kahden elementin kanssa](/assets/html-example-13.png)

Huomaamme, ettÃ¤ elementti ei siirtynyt yhtÃ¤Ã¤n. TÃ¤mÃ¤ johtuu siitÃ¤, ettÃ¤ oletusarvoisesti kaikilla HTML-elementeillÃ¤ on CSS:n `position`-ominaisuuden arvo `static`, joten `top`-, `right`-, `bottom`- tai `left`-arvoilla ei ole vaikutusta elementin sijaintiin. Position-ominaisuudella on olemassa viisi erilaista arvoa, joista kÃ¤ymme lÃ¤pi `static`-, `relative`- ja `absolute`-arvot.

LisÃ¤tÃ¤Ã¤n `.second-box-container`-selektorilla elementille vielÃ¤ `position: relative` -arvo.

![Esimerkki HTML-sivu, relative positionin kanssa](/assets/html-example-14.png)

Huomaamme, ettÃ¤ saimme elementin liikkumaan. Position ominaisuuden `relative`-arvolla elementti on entisellÃ¤ tavalla sijoitettuna dokumenttiin. Sen sijaintia pystyy kuitenkin muokkaamaan `top`-, `right`-, `bottom`- tai `left`-ominaisuuksilla verraten sen alkuperÃ¤iseen sijaintiin. Vaidetaan arvoksi `absolute` ja katsotaan mitÃ¤ dokumentille tapahtuu.

![Esimerkki HTML-sivu, absolute positionin kanssa](/assets/html-example-15.png)

Elementti on sijoittunut reunaan, mutta se ei varaa enÃ¤Ã¤ tilaa itse dokumentista. TÃ¤mÃ¤ johtuu siitÃ¤, ettÃ¤ `position: absolute`-ominaisuus poistaa elementin dokumentin normaalista esitysmuodosta. Elementille ei enÃ¤Ã¤ varata erikseen tilaa. Elementin sijainti on verrannollinen sen ensimmÃ¤iseen sijaintiin (elementti, jonka sisÃ¤llÃ¤ elementti on), ja jos sellaista ei ole, niin se on verrannollinen omaan normaaliin sijaintiinsa ilman `position: absolute` arvoa.

Position-ominaisuutta pidetÃ¤Ã¤n monesti yhtenÃ¤ CSS:n vaikeimpana asiana. Suosittelemme siihen tutustumista vielÃ¤ lisÃ¤Ã¤ esimerkiksi [tÃ¤Ã¤ltÃ¤](https://developer.mozilla.org/en-US/docs/Web/CSS/position).

<div class="exercise">
<h3>Exercise 9: Elementit vierekkÃ¤in {% include points.html text="10%" %}</h3>
<ol>
<li>Tee git-kansioon toinen tiedosto, ja nimeÃ¤ se position.html-nimellÃ¤.</li>
<li>Tee myÃ¶s styles.css-tiedosto ja tee tarvittavat toimenpiteet, jotta saat linkitettyÃ¤ tiedostot toisiinsa.</li>
<li>Jatketaan edellisen osion esimerkkiÃ¤, tee HTML- ja CSS-tiedostot niin pitkÃ¤lle, ettÃ¤ saat kolme erivÃ¤ristÃ¤ elementtiÃ¤ alekkain.</li>
<li>Nyt ideana on, ettÃ¤ saisit samat elementit vierekkÃ¤in. Lopputuloksen pitÃ¤isi nÃ¤yttÃ¤Ã¤ tÃ¤ltÃ¤:</li>
<img src="/assets/html-ex-9.png" alt="Elementit vierekkÃ¤in"/>
<li>Kun koet, ettÃ¤ tehtÃ¤vÃ¤ on valmis, lisÃ¤Ã¤ tiedostot gittiin ja tee commit viestillÃ¤ <code>Osa 3. YhdeksÃ¤s tehtÃ¤vÃ¤</code>. Puske tehtÃ¤vÃ¤ Githubiin.</li>
<div class="note">Vinkki: Jos ei onnistu, niin testaa mitÃ¤ tapahtuu, jos sijoitat elementtejÃ¤ toisten sisÃ¤lle eri position-arvoilla.</div>
</ol>
</div>

# CSS: mittayksikÃ¶t

KÃ¤sittelimme Ã¤sken, miten elementtejÃ¤ asetellaan verkkosivuilla. KÃ¤ytimme `px`-mittayksikkÃ¶Ã¤. Katsotaan nyt tarkemmin, mitÃ¤ tÃ¤mÃ¤ tarkoittaa ja mitÃ¤ muita mittayksikÃ¶itÃ¤ CSS tarjoaa.

Tietokone nÃ¤yttÃ¤Ã¤ kuvaa pikseleissÃ¤. TÃ¤llÃ¤ hetkellÃ¤ yleisin kÃ¤ytÃ¶ssÃ¤ oleva resoluutio on `1366x768`, mutta resoluutio riippuu tÃ¤ysin tietokoneen nÃ¤ytÃ¶n mallista. Resoluutiolla tarkoitetaan kuinka monta pikseliÃ¤ nÃ¤ytÃ¶ssÃ¤ on. EnsimmÃ¤inen mitta kertoo pystysarakkeiden mÃ¤Ã¤rÃ¤n (x-akseli) ja jÃ¤lkimmÃ¤inen vaakarivien mÃ¤Ã¤rÃ¤n (y-akseli). Otetaan esimerkiksi `1366x768`-resoluutio. Seuraava kuva havainnollistaa, miten pikselit asettuvat:

![Resoluutiota havainnollistava kuva](/assets/resolution-example.png)

Eli `1366x768`-resoluutiolla varustetussa nÃ¤ytÃ¶ssÃ¤ on yli **miljoona** pikseliÃ¤. Nyt kun tiedÃ¤mme mistÃ¤ tietokoneen kuva koostuu, voimme helpommin kÃ¤sitellÃ¤ eri mittayksikÃ¶itÃ¤. KÃ¤ymme lÃ¤pi CSS:n tÃ¤rkeimmÃ¤t mittayksikÃ¶t ja listaamme tÃ¤mÃ¤n jÃ¤lkeen vÃ¤hemmÃ¤n tÃ¤rkeÃ¤t.

1. `px` tarkoittaa yksittÃ¤istÃ¤ pikseliÃ¤ nÃ¤ytÃ¶llÃ¤.
2. `em` on verrannollinen sen elementin kirjasinkokoon, minkÃ¤ sisÃ¤llÃ¤ kyseinen elementti on. Yksi `em` tarkoittaa yhtÃ¤ kirjasinkokoa.  `2em` tarkoittaa kaksinkertaista kirjasinkokoa. Esimerkiksi jos ylemmÃ¤n elementin kirjasinkoko on `12px`, on sisemmÃ¤n elementin `1em` sama kuin `12px`, ja `2em` sama kuin `24px`.  Kirjaisinkoot eli `font-size`-ominaisuus kannattaa aina merkitÃ¤ joko pikseleinÃ¤ tai em-mittayksikÃ¶llÃ¤.
3. `%` on verrannollinen elementtiin, jonka sisÃ¤llÃ¤ kyseinen elementti on. Jos ylempi elementti on `200px` leveÃ¤, ja sisempi on `20%` leveÃ¤, niin sen koko on `40px`.
4. `rem` on muuten sama kuin `em`, mutta se on verrannollinen `<html></html>`-elementin kirjasinkokoon.
5. `vw` on verrannollinen nÃ¤ytÃ¶n leveyteen. Yksi yksikkÃ¶ tarkoittaa yhtÃ¤ prosenttia nÃ¤ytÃ¶n leveydestÃ¤.
6. `vh` on verrannollinen nÃ¤ytÃ¶n korkeuteen. Yksi yksikkÃ¶ tarkoittaa yhtÃ¤ prosenttia nÃ¤ytÃ¶n korkeudesta.

NÃ¤iden lisÃ¤ksi on kÃ¤ytÃ¶ssÃ¤ mittayksikÃ¶t `cm`, `mm`, `in`, `pt`, `pc`, `ex`, `ch`, `vmin` ja `vmax`. Voit lukea niistÃ¤ lisÃ¤Ã¤ [tÃ¤Ã¤ltÃ¤](https://www.w3schools.com/cssref/css_units.asp).

# CSS:n kÃ¤ytetyimmÃ¤t ominaisuudet

CSS-ominaisuuksia on olemassa valtavasti ja emme ehdi millÃ¤Ã¤n kÃ¤ydÃ¤ niitÃ¤ kaikkia lÃ¤pi. YritÃ¤mme kuitenkin kÃ¤ydÃ¤ tÃ¤rkeimmÃ¤t ominaisuudet lÃ¤pi ja kertoa vÃ¤hÃ¤n miten niitÃ¤ kÃ¤ytetÃ¤Ã¤n.

`color: #RRGGBB (Red, Green, Blue)` antaa valita elementin vÃ¤rin, jonka voi antaa hex-arvolla tai yleisimpien vÃ¤rien kohdalla englanniksi. Emme ehdi tÃ¤llÃ¤ kurssilla kÃ¤ydÃ¤ lÃ¤pi mitÃ¤ hex-arvo tarkoittaa, mutta voit lukea halutessasi aiheesta [tÃ¤Ã¤ltÃ¤](https://en.wikipedia.org/wiki/Web_colors), ja valita erilaisia arvoja [hex-valitsemella](https://htmlcolorcodes.com/color-picker/).

`text-aling: left [ right [ center [ justify` kertoo mihin suuntaan teksti sisennetÃ¤Ã¤n.

`text-decoration: none | underline | overline | line-through | blink | inherit` mahdollistaa yleisimmÃ¤t tekstin muokkaustavat, esimerkiksi alleviivauksen.

`text-transform: none | capitalize | uppercase | lowercase` mahdollistaa koko tekstin pienellÃ¤/suurella kirjoitettuna, vaikka tekstin sisÃ¤llÃ¶ssÃ¤ olisi erikokoisia kirjaimia.

`line-height` voi sÃ¤Ã¤tÃ¤Ã¤ tekstien rivien vÃ¤listÃ¤ etÃ¤isyyttÃ¤. TÃ¤mÃ¤ ominaisuus vaikuttaa vain tekstiin. Anna tÃ¤lle arvot pikseleinÃ¤ tai prosentteina.

`font-family` kertoo, millaista kirjaisinta kÃ¤ytetÃ¤Ã¤n.

`font-size` kertoo, kuinka suurta tekstiÃ¤ nÃ¤ytetÃ¤Ã¤n. KÃ¤ytÃ¤ tÃ¤mÃ¤n kanssa `px` tai `em` arvoja.

`font-style` mahdollistaa eri kirjasintyylien kÃ¤ytÃ¶n, esimerkiksi lihavoidun. Kannattaa kuitenkin aina merkitÃ¤ lihavointi `<strong></strong>`- tai `<strong></strong>`-elementeillÃ¤, ja kursivointi `<em></em>`-elementillÃ¤. TÃ¤mÃ¤ sen takia, ettÃ¤ esimerkiksi sokeiden lukuohjelmat lukevat verkkosivua suoraan HTML:stÃ¤, eikÃ¤ tÃ¤llÃ¶in CSS:Ã¤Ã¤n tehdyt muutokset vÃ¤lity kuuntelijalle.

`background-color` vÃ¤rjÃ¤Ã¤ elementin taustan, tÃ¤lle voi antaa samoja arvoja kuin color-elementille.

`border-style` kertoo millainen reuna elementillÃ¤ on, esimerkiksi `solid` tai `dashed`.

`border-width` mÃ¤Ã¤rittelee reunan leveyden. Annetaan yleensÃ¤ pikseleinÃ¤.

`border-color` mÃ¤Ã¤rittelee, minkÃ¤ vÃ¤rinen reuna on. TÃ¤lle voi antaa samoja ominaisuuksia kuin `background-color`- tai `color`-ominaisuuksille.

<div class="exercise">
<h3>Exercise 10: CSS:n ominaisuuksia {% include points.html text="5%" %}</h3>
<ol>
<li>TehtÃ¤vÃ¤n ideana on, ettÃ¤ tutustut Ã¤sken kÃ¤ytyihin ominaisuuksiin itsenÃ¤isesti.</li>
<li>Ota tavoitteeksi, ettÃ¤ saat edellisessÃ¤ tehtÃ¤vÃ¤ssÃ¤ tehdyn sivun nÃ¤yttÃ¤mÃ¤Ã¤n tÃ¤ltÃ¤.</li>
<li>ÃlÃ¤ vÃ¤litÃ¤ vaikka sivusto on ruma, vaan keskity tutkimaan mitÃ¤ eri CSS-ominaisuudet tekevÃ¤t.</li>
<img src="/assets/html-ex-10.png" alt="HTML-sivu ilman CSS-koodia"/>
<li>Kun koet, ettÃ¤ tehtÃ¤vÃ¤ on valmis, tee commit viestillÃ¤ <code>Osa 3. Kymmenes tehtÃ¤vÃ¤</code> ja puske tehtÃ¤vÃ¤ Githubiin.</li>
</ol>
</div>

# Miten tehdÃ¤ sivuista luettavat CSS:n avulla

Opimme Ã¤sken yleisimpiÃ¤ CSS-ominaisuuksia. Katsotaan nyt, miten nÃ¤itÃ¤ kannattaisi kÃ¤yttÃ¤Ã¤, jotta verkkosivuista saisi luettavammat. Aloitetaan verkkosivusta, jonka materiaali on edellisistÃ¤ osista tuttua:

![HTML sivu ilman CSS-koodia](/assets/html-example-7.png)

Huomaamme, ettÃ¤ ilman CSS:Ã¤Ã¤ verkkosivua on todella vaikea lukea, ja asialle pitÃ¤isi tehdÃ¤ jotain. Verkkosivun HTML-koodi on lyhennettynÃ¤ tÃ¤mÃ¤nnÃ¤kÃ¶inen:

```html
<html>
  <head>
    ...
  </head>
  <body>
    <h2>Tiedostonhallinta...</h2>
    <p>KomentoriviltÃ¤...</p>
    <p>Avaa graafinen...</p>
    <p>Huomaa...</p>
    <p>Huomaa...</p>
    <p>Huomaa...</p>
    <p>Navigoi...</p>
  </body>
</html>
```

Aloitetaan yksinkertaisella CSS-ominaisuudella, eli tekstin keskittÃ¤misellÃ¤. KÃ¤ytÃ¤mme edellisestÃ¤ kappaleesta tuttuja `margin`- ja `width`-ominaisuuksia `<body></body>`-elementtiin.

```css
body {
  margin: 0 auto;
  max-width: 50em;
}
```

![HTML sivu ilman CSS-koodia](/assets/html-example-8.png)

Huomataan, ettÃ¤ tekstiÃ¤ on jo paljon helpompi lukea, koska teksti on keskellÃ¤ nÃ¤yttÃ¶Ã¤. Emme ole kuitenkaan vielÃ¤ tyytyvÃ¤isiÃ¤. Otetaan seuraavaksi tarkkailuun kÃ¤ytetyt fontit. YleensÃ¤ selaimet kÃ¤yttÃ¤vÃ¤t valmiina `Times`-fonttia. TÃ¤mÃ¤ voi kuitenkin nÃ¤yttÃ¤Ã¤ epÃ¤mielyttÃ¤vÃ¤ltÃ¤ silmÃ¤Ã¤n, mikÃ¤ johtuu siitÃ¤, ettÃ¤ `Times`on muuten todella vÃ¤hÃ¤n kÃ¤ytetty fontti. Vaihdetaan fontti `sans-serif`-tyyliseksi, jolloin sivuston ulkonÃ¤kÃ¶ selkeÃ¤sti kohenee. TÃ¤mÃ¤ tehdÃ¤Ã¤n CSS-ominaisuudella `font-family: "Helvetica", "Arial", , sans-serif;`. Eli **lisÃ¤tÃ¤Ã¤n** se body-mÃ¤Ã¤ritelmÃ¤Ã¤n:

```css
body {
  font-family: 'Helvetica', 'Arial', sans-serif;
}
```

YleensÃ¤ sivusto nÃ¤yttÃ¤Ã¤ myÃ¶s vÃ¤hÃ¤n kÃ¶ykÃ¤iseltÃ¤ sen takia, ettÃ¤ teksti ei saa tarpeeksi tilaa. LisÃ¤tÃ¤Ã¤n `body`n riville enemmÃ¤n korkeutta, ja kasvatetaan `padding`:illa `body`lle vÃ¤hÃ¤n lisÃ¤Ã¤ tilaa. LisÃ¤ksi otetaan otsikko enemmÃ¤n erilleen ylÃ¤reunasta.

```css
body {
  line-height: 1.5;
  padding: 4em 1em;
}

h2 {
  margin-top: 1em;
  padding-top: 1em;
}
```

![HTML sivu ilman CSS-koodia](/assets/html-example-9.png)

Ollaan tultu jo paljon eteenpÃ¤in alkuperÃ¤isestÃ¤ sivusta, mutta vielÃ¤kin materaali nÃ¤yttÃ¤Ã¤ vÃ¤hÃ¤n oudolta. TekstiÃ¤ ei ole kovin mukava lukea, koska tausta on tÃ¤ysin valkoinen, ja teksti tÃ¤ysin mustaa. YleensÃ¤ on hyvÃ¤, jos teksti on enemmÃ¤n harmaaseen taitettua. NÃ¤in voimme myÃ¶s korostaa enemmÃ¤n otsikkoa laittamalla sitÃ¤ vÃ¤hÃ¤n tummemmaksi.

```
body {
  color: #555;
}
```

```
h2 {
  color: #333;
}
```

![HTML sivu ilman CSS-koodia](/assets/html-example-10.png)

NÃ¤yttÃ¤Ã¤ jo paljon paremmalta. VielÃ¤ pitÃ¤isi korjata tekstissÃ¤ erottuva koodi omiin lohkoihin. TÃ¤mÃ¤ tapahtuu lisÃ¤Ã¤mÃ¤llÃ¤ koodeille omat `<code></code>`-elementit ja antamalle code-elementille seuraavat CSS-ominaisuudet:

```
code {
  padding: 2px 4px;
  vertical-align: text-bottom;
  background: #eee;
}
```

![HTML sivu ilman CSS-koodia](/assets/html-example-11.png)

Teksti nÃ¤yttÃ¤Ã¤ jo suhteellisen luettavalta, ainakin kun vertaamme siihen mistÃ¤ lÃ¤hdimme liikkeelle.

<div class="exercise">
<h3>Exercise 11: Sivuista luettavat CSS:n avulla {% include points.html text="10%" %}</h3>
<ol>
<li>Tee kappaleessa kÃ¤sitellyt mÃ¤Ã¤rittelyt SeitsemÃ¤n veljestÃ¤ -verkkosivulle. Voit lisÃ¤tÃ¤ pidemmÃ¤n jakson SeitsemÃ¤n veljestÃ¤ -romaanista, jotta nÃ¤et paremmin lopputuloksen. LÃ¶ydÃ¤t koko kirjan <a href="http://www.gutenberg.org/cache/epub/11940/pg11940.txt" target="_blank">tÃ¤Ã¤ltÃ¤.</a></li>
<li>Testaa sivustolle mahdollisimman paljon oppimiasi asiota. YhtÃ¤ oikeaa lopputulosta ei ole.</li>
<li>Kun koet, ettÃ¤ tehtÃ¤vÃ¤ on valmis, tee commit viestillÃ¤ <code>Osa 3. Yhdestoista tehtÃ¤vÃ¤</code> ja puske tehtÃ¤vÃ¤ Githubiin.</li>
</ol>
</div>

# Verkkosivun julkaiseminen ja Github pages

Staattisen verkkosivun voi julkaista monessa paikassa. Yleinen tapa on vuokrata/ostaa oma palvelin ja tarjota sieltÃ¤ dokumentteja maailmalle. Harjoittelemme kuitenkin tÃ¤llÃ¤ kurssilla verkkosivun julkaisua Github-sivuna.

Github-sivut on ilmainen Githubin palvelu, joka mahdollistaa staattisten sivujen tarjoamisen suoraan Githubin repositoriosta.
TehdÃ¤Ã¤n uusi repositorio, jonne lisÃ¤Ã¤mme `index.html` tiedoston ja `css`-kansioon `styles.css`-tiedoston. TÃ¤mÃ¤n jÃ¤lkeen kirjoitamme `index.html`-tiedostoon seuraavan pÃ¤tkÃ¤n:

```html
<!doctype html>

<html lang="en">

<head>
  <meta charset="utf-8">

  <title>Github page testi</title>

  <link rel="stylesheet" href="css/styles.css">

</head>

<body>
  <h1>Github pages testi</h1>
</body>

</html>
```

Ja CSS-tiedostoon lisÃ¤Ã¤mme seuraavan tyylin.

```css
h1 {
  color: grey;
}
```

TÃ¤mÃ¤n jÃ¤lkeen lisÃ¤Ã¤mme tiedostot gittiin ja puskemme ne Githubiin. Avataan Githubista repositorion settings-valikko.

![Githubin settings valikon ohje](/assets/html-github-settings.png)

Valitaan settings-valikosta "github pages", ja julkaistaan master-haara Github-sivuna.

![Github sivun julkaisu](/assets/html-github-pages.png)

TÃ¤mÃ¤n jÃ¤lkeen mennÃ¤Ã¤n osoitteeseen, missÃ¤ sivun pitÃ¤isi olla. Osoite on oletuksena muotoa `username.github.io/repository`.

![Github sivu julkaistuna](/assets/html-github-pages-live.png)

Huomaamme, ettÃ¤ sivusto on julkisena ja jokaisen internetin kÃ¤yttÃ¤jÃ¤n saatavilla ympÃ¤ri maailman.

<div class="note">
<strong>PÃ¤Ã¤aineopiskelijoille</strong>

Yliopisto tarjoaa tietojenkÃ¤sittelytieteen pÃ¤Ã¤aineopiskelijoille palvelintilaa, jossa voi pyÃ¶rittÃ¤Ã¤ omia staattisia verkkosivuja. KÃ¤yttÃ¤jÃ¤n dokumentit sijaitsee levypalvelimella kÃ¤yttÃ¤jÃ¤n CS-kotihakemiston public_html-alihakemistossa: <code>/cs/home/kÃ¤yttÃ¤jÃ¤tunnus/public_html/</code>.

<p>Kotisivu nÃ¤kyy maailmalle osoitteessa <code>http://www.cs.helsinki.fi/u/kÃ¤yttÃ¤jÃ¤tunnus/</code>.</p>

Kotisivun laatiminen yliopiston palvelimelle onnistuu kÃ¤ytÃ¤nnÃ¶ssÃ¤ nÃ¤in:

<ol>
<li>Luo ensin kotihakemistoosi hakemisto <code>public_html</code>.</li>
<li>Sen jÃ¤lkeen luo <code>index.html</code>-tiedosto tÃ¤hÃ¤n hakemistoon ja tÃ¤ytÃ¤ se tarvittavalla HTML-koodilla.</li>
<li>Jotta WWW-palvelin voi nÃ¤yttÃ¤Ã¤ kotisivun maailmalle, sille ja sen hakemistopolulle tÃ¤ytyy lisÃ¤tÃ¤ sopivasti oikeuksia:</li>
<ol>
<li>public_html: Kaikilla kÃ¤yttÃ¤jillÃ¤ tulee olla luku- ja suoritusoikeudet.</li>
<li>cs-kotihakemisto (cs/home/tunnus): suoritusoikeudet kaikille.</li>
</ol>

<li>TÃ¤mÃ¤n jÃ¤lkeen sivuston pitÃ¤isi nÃ¤kyÃ¤ osoitteessa <code>http://www.cs.helsinki.fi/u/kÃ¤yttÃ¤jÃ¤tunnus/</code></li>
</ol>

</div>

<div class="exercise">

<h3>Exercise 12: Ansioluettelo {% include points.html text="10%" %}</h3>
<ol>
<li>Luo uusi repositorio Githubiin.</li>
<li>Tee repositorioon oma ansioluettelo staattisena verkkosivuna. Voit halutessasi tehdÃ¤ ansioluettelon myÃ¶s keksityillÃ¤ tiedoilla.</li>
<li>KÃ¤ytÃ¤ ansioluettelon tekoon tÃ¤ssÃ¤ osiossa opetettuja asioita. Voit hakea hakukoneella esimerkkejÃ¤ esimerkiksi hakusanoilla <code>static website resumes</code>. Jos et osaa tehdÃ¤ jotain tyyliÃ¤ CSSllÃ¤ niin hae rohkeasti netistÃ¤ tietoa, miten sellainen tehdÃ¤Ã¤n.</li>
<li>Puske lopuksi tekemÃ¤si muutokset GitHubiin.</li>
<li>Julkaise ansioluettelo Github-sivuna.</li>
</ol>
</div>

## Loppusanat

Osa antaa hyvÃ¤t perusteet HTML:n ja CSS:n kanssa. Nyt sinun pitÃ¤isi osata kertoa, mitÃ¤ ne ovat ja mihin niitÃ¤ kÃ¤ytetÃ¤Ã¤n. PitÃ¤Ã¤ kuitenkin muistaa, ettÃ¤ molemmat ovat todella laajoja kieliÃ¤, ja niiden opiskeluun voi kÃ¤yttÃ¤Ã¤ halutessaan valtavasti aikaa. Aihe on tÃ¤rkeÃ¤ ja osaajia tarvitaan. Jos verkkosivujen tekeminen kiinnostaa tulevaisuudessa niin kannattaa jatkaa HTML:n ja CSS:n opiskelua.

LisÃ¤Ã¤ HTML:stÃ¤ ja CSS:stÃ¤ voi lukea esimerkiksi seuraavista lÃ¤hteistÃ¤:

- <a href="https://developer.mozilla.org/en-US/docs/Web/HTML">https://developer.mozilla.org/en-US/docs/Web/HTML</a>
- <a href="https://developer.mozilla.org/en-US/docs/Web/CSS">https://developer.mozilla.org/en-US/docs/Web/CSS</a>
  - Mozillan tekemÃ¤ HTML- ja CSS -dokumentaatio kattaa tarkasti CSS:n ja HTML:n perusteet. Jos aihe kiinnostaa enemmÃ¤n kannattaa kyseiset dokumentaatiot kahlata lÃ¤pi.
- Google on hyvÃ¤ tyÃ¶kalu myÃ¶s HTML- ja CSS-ongelmien kanssa. Kannattaa rohkeasti hakea tietoa, jos jokin asia mietityttÃ¤Ã¤. Maailmassa on paljon ihmisiÃ¤, jotka ovat miettineet samoja asioita.

## Kurssin loppusanat

TÃ¤hÃ¤n pÃ¤Ã¤ttyy Tietokone tyÃ¶vÃ¤lineenÃ¤ -kurssin materiaali.

PidÃ¤ jÃ¤lleen tauko, ja anna aivojesi levÃ¤tÃ¤. Onnittele itseÃ¤si siitÃ¤, ettÃ¤ sait kÃ¤ytyÃ¤ koko materiaalin lÃ¤pi. Palaa sen jÃ¤lkeen materiaalin oppimistavoitteisiin ja kÃ¤y ne lÃ¤pi ajatuksella. Mieti, mitÃ¤ asioita muistat, ja mitÃ¤ et. Pyri selventÃ¤mÃ¤Ã¤n jokainen kÃ¤site nopeasti itsellesi katsomatta materiaaliin. MikÃ¤li et muista jotain, etsi tieto netistÃ¤ tai materiaalista. Lue lopuksi vielÃ¤ tenttiÃ¤ koskevat ohjeet tarkasti.

Kun osaat mielestÃ¤si kurssin aiheet tarpeeksi hyvin, siirry Moodle-alueelle. Merkitse siellÃ¤ tekemÃ¤si laskaritehtÃ¤vÃ¤t. Varmista, ettÃ¤ olet ilmoittautunut kurssille Weboodissa. TÃ¤mÃ¤n jÃ¤lkeen olet valmis tekemÃ¤Ã¤n tentin. Saat arvosanan kuluvan kuukauden lopussa.

<div class="warning">
Muista antaa kurssista anonyymiÃ¤ palautetta <a href="https://weboodi.helsinki.fi"> Weboodissa</a> kohdasta > TyÃ¶kalut > Omat Palautteet.
</div>

Kiitos kurssista ja onnea tuleviin opintoihin! Opiskelukavereiden ja Googlen avulla selviÃ¤Ã¤ vaikeimmistakin kursseista :)
